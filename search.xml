<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL主键自增不连续的情况</title>
      <link href="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/"/>
      <url>/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<h1><strong>场景1</strong>：自增初始值和自增步长不为1</h1><p>在 MySQL 里面，如果字段 id 被定义为 AUTO_INCREMENT，在插入一行数据的时候，自增值的行为如下：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>如果插入数据时 id 字段指定为 0、null 或未指定值</strong>，那么就把这个表当前的 AUTO_INCREMENT 值填到自增字段；</p></li><li class="lvl-2"><p><strong>如果插入数据时 id 字段指定了具体的值</strong>，就直接使用语句里指定的值。</p></li></ul><p>根据要插入的值和当前自增值的大小关系，自增值的变更结果也会有所不同。假设某次要插入的值是 <code>insert_num</code>，当前的自增值是 <code>autoIncrement_num</code>：</p><ul class="lvl-0"><li class="lvl-2"><p>如果 <code>insert_num &lt; autoIncrement_num</code>，那么这个表的自增值不变</p></li><li class="lvl-2"><p>如果 <code>insert_num &gt;= autoIncrement_num</code>，就需要把当前自增值修改为新的自增值</p></li></ul><p>也就是说，如果插入的 id 是 100，当前的自增值是 90，<code>insert_num &gt;= autoIncrement_num</code>，那么自增值就会被修改为新的自增值即 101</p><p>一定是这样吗？NO</p><p>了解过分布式 id 的小伙伴一定知道，为了避免两个库生成的主键发生冲突，我们可以让一个库的自增 id 都是奇数，另一个库的自增 id 都是偶数</p><p>这个奇数偶数其实是通过 <code>auto_increment_offset</code> 和 <code>auto_increment_increment</code> 这两个参数来决定的，这俩分别用来表示自增的初始值和步长，默认值都是 1。</p><p>所以，上面的例子中生成新的自增值的步骤实际是这样的：从 <code>auto_increment_offset</code> 开始，以 <code>auto_increment_increment</code> 为步长，持续叠加，直到找到第一个大于 100 的值，作为新的自增值。</p><p>所以，这种情况下，自增值可能会是 102，103 等等之类的，就会导致不连续的主键 id。</p><p>更遗憾的是，即使在自增初始值和步长这两个参数都设置为 1 的时候，自增主键 id 也不一定能保证主键是连续的</p><h1><strong>场景2</strong>：唯一键冲突</h1><p>举个例子，我们现在往表里插入一条 (null,1,1) 的记录，生成的主键是 1，AUTO_INCREMENT= 2，对吧</p><img src="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/image-20240613190523235.png" alt="image-20240613190523235" style="zoom:50%;"><p>这时我再执行一条插入 <code>(null,1,1)</code> 的命令，很显然会报错 <code>Duplicate entry</code>，因为我们设置了一个唯一索引字段 <code>a</code>：</p><p>但是，你会惊奇的发现，虽然插入失败了，但自增值仍然从 2 增加到了 3！</p><img src="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/image-20240613190549159.png" alt="image-20240613190549159" style="zoom:50%;"><p><strong>原因：</strong></p><p>我们来分析下这个 insert 语句的执行流程：</p><ol><li class="lvl-3"><p>执行器调用 InnoDB 引擎接口准备插入一行记录 (null,1,1);</p></li><li class="lvl-3"><p>InnoDB 发现用户没有指定自增 id 的值，则获取表 <code>test_pk</code> 当前的自增值 2；</p></li><li class="lvl-3"><p>将传入的记录改成 (2,1,1);</p></li><li class="lvl-3"><p>将表的自增值改成 3；</p></li><li class="lvl-3"><p>继续执行插入数据操作，由于已经存在 a=1 的记录，所以报 Duplicate key error，语句返回</p></li></ol><p>可以看到，自<strong>增值修改的这个操作，是在真正执行插入数据的操作之前。</strong></p><p>这个语句真正执行的时候，因为碰到唯一键 a 冲突，所以 id = 2 这一行并没有插入成功，但也没有将自增值再改回去。所以，在这之后，再插入新的数据行时，拿到的自增 id 就是 3。也就是说，出现了自增主键不连续的情况。</p><h1><strong>场景3</strong>：回滚</h1><p>我们现在表里有一行 <code>(1,1,1)</code> 的记录，AUTO_INCREMENT = 3：</p><p>我们先插入一行数据 <code>(null, 2, 2)</code>，也就是 (3, 2, 2) ，并且 AUTO_INCREMENT 变为 4：</p><p>然后回滚</p><img src="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/image-20240613191441923.png" alt="image-20240613191441923" style="zoom:50%;"><p>虽然我们插入了一条 (null, 3, 3) 记录，但是使用 rollback 进行回滚了，所以数据库中是没有这条记录的：</p><img src="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/image-20240613191459859.png" alt="image-20240613191459859" style="zoom:50%;"><p>在这种事务回滚的情况下，自增值并没有同样发生回滚！如下图所示，自增值仍然固执地从 4 增加到了 5：</p><img src="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/image-20240613191523377.png" alt="image-20240613191523377" style="zoom:50%;"><p>所以这时候我们再去插入一条数据（null, 3, 3）的时候，主键 id 就会被自动赋为 <code>5</code> 了：</p><p>**那么，为什么在出现唯一键冲突或者回滚的时候，MySQL 没有把表的自增值改回去呢？**回退回去的话不就不会发生自增 id 不连续了吗？</p><p>事实上，这么做的主要原因是为了提高性能。</p><p>我们直接用反证法来验证：假设 MySQL 在事务回滚的时候会把自增值改回去，会发生什么？</p><p>现在有两个并行执行的事务 A 和 B，在申请自增值的时候，为了避免两个事务申请到相同的自增 id，肯定要加锁，然后顺序申请，对吧。</p><ol><li class="lvl-3"><p>假设事务 A 申请到了 id = 1， 事务 B 申请到 id=2，那么这时候表 t 的自增值是 3，之后继续执行。</p></li><li class="lvl-3"><p>事务 B 正确提交了，但事务 A 出现了唯一键冲突，也就是 id = 1 的那行记录插入失败了，那如果允许事务 A 把自增 id 回退，也就是把表的当前自增值改回 1，那么就会出现这样的情况：表里面已经有 id = 2 的行，而当前的自增 id 值是 1。</p></li><li class="lvl-3"><p>接下来，继续执行的其他事务就会申请到 id=2。这时，就会出现插入语句报错“主键冲突”。</p></li></ol><h1>场景4：批量插入</h1><p>对于批量插入数据的语句，MySQL 有一个批量申请自增 id 的策略：</p><ol><li class="lvl-3"><p>语句执行过程中，第一次申请自增 id，会分配 1 个；</p></li><li class="lvl-3"><p>1 个用完以后，这个语句第二次申请自增 id，会分配 2 个；</p></li><li class="lvl-3"><p>2 个用完以后，还是这个语句，第三次申请自增 id，会分配 4 个；</p></li><li class="lvl-3"><p>依此类推，同一个语句去申请自增 id，每次申请到的自增 id 个数都是上一次的两倍。</p></li></ol><p>注意，这里说的批量插入数据，不是在普通的 insert 语句里面包含多个 value 值！！！，因为这类语句在申请自增 id 的时候，是可以精确计算出需要多少个 id 的，然后一次性申请，申请完成后锁就可以释放了。</p><p>而对于 <code>insert … select</code>、replace …… select 和 load data 这种类型的语句来说，MySQL 并不知道到底需要申请多少 id，所以就采用了这种批量申请的策略，毕竟一个一个申请的话实在太慢了。</p><p>举个例子，假设我们现在这个表有下面这些数据：</p><img src="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/image-20240613192113884.png" alt="image-20240613192113884" style="zoom:50%;"><p>我们创建一个和当前表 <code>test_pk</code> 有相同结构定义的表 <code>test_pk2</code>：</p><img src="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/image-20240613192137177.png" alt="image-20240613192137177" style="zoom: 67%;"><p>然后使用 <code>insert...select</code> 往 <code>teset_pk2</code> 表中批量插入数据：</p><img src="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/image-20240613192217899.png" alt="image-20240613192217899" style="zoom:50%;"><p>可以看到，成功导入了数据。</p><p>再来看下 <code>test_pk2</code> 的自增值是多少：</p><img src="/2024/06/13/MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%83%85%E5%86%B5/image-20240613192402546.png" alt="image-20240613192402546" style="zoom: 67%;"><p>具体来说，insert……select 实际上往表中插入了 5 行数据 （1 1）（2 2）（3 3）（4 4）（5 5）。但是，这五行数据是分三次申请的自增 id，结合批量申请策略，每次申请到的自增 id 个数都是上一次的两倍，所以：</p><ul class="lvl-0"><li class="lvl-2"><p>第一次申请到了一个 id：id=1</p></li><li class="lvl-2"><p>第二次被分配了两个 id：id=2 和 id=3</p></li><li class="lvl-2"><p>第三次被分配到了 4 个 id：id=4、id = 5、id = 6、id=7</p></li></ul><p>由于这条语句实际只用上了 5 个 id，所以 id=6 和 id=7 就被浪费掉了。之后，再执行 <code>insert into test_pk2 values(null,6,6)</code>，实际上插入的数据就是（8,6,6)：</p><p>—内容来自 JavaGuid</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis知识点</title>
      <link href="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis数据结构和类型">Redis数据结构和类型</h2><p>Redis有5种<strong>数据类型</strong>：字符串、链表、哈希、集合、有序集合</p><p>与8种<strong>数据结构</strong>分别对应：</p><table><thead><tr><th>String</th><th>List</th><th>Hash</th><th>Set</th><th>ZSet</th></tr></thead><tbody><tr><td>SDS（简单动态字符串）</td><td>LinkedList、ZipList、QuickList</td><td>Dict、ZipList</td><td>Dict、IntSet</td><td>ZipList、SkipList</td></tr></tbody></table><h3 id="String">String</h3><p><strong>应用场景：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>需要存储<strong>常规数据</strong>的场景：<mark><code>Session</code></mark>、<mark><code>Token</code></mark>、图片地址、<strong>序列化后的对象</strong></p></li><li class="lvl-2"><p>需要<strong>计数</strong>的场景：用户单位时间请求数、页面单位时间访问量</p></li><li class="lvl-2"><p>分布式锁：<code>SETNX KEY VALUE</code></p></li></ul><h3 id="List">List</h3><p><strong>应用场景：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>信息流展示：最新文章、最新动态相关命令：<code>LPUSH</code>、<code>LRANGE</code></p></li><li class="lvl-2"><p>消息队列，不建议用Redis实现消息队列</p></li></ul><h3 id="Hash">Hash</h3><p>Redis的Hash是一个 String 类型的 field-value 映射表，特别适合存储对象。</p><p><strong>应用场景：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>对象存储：用户信息、商品信息、文章信息、购物车信息</p></li><li class="lvl-2"><p><mark><strong>存对象用String还是Hash？</strong></mark></p><ul class="lvl-2"><li class="lvl-4">String 存的是序列化后的对象，存的是整个对象。Hash 是对对象的每个字段单独存储，可以获取部分字段的信息，也可以修改、添加字段，节省网络流量。如果对象中的某个字段信息需要经常改动，或者经常查找，用 Hash 更合适。</li><li class="lvl-4">String 更加节省内存，缓存相同数据量的对象，String 的内存消耗约是 Hash 的一半，并且，存储具有多层嵌套的对象也更加方便。如果系统对性能和资源消耗比较敏感，用 String 就更加合适。</li></ul></li></ul><h3 id="Set">Set</h3><p>元素无序且唯一，Set提供了多个判断元素是否存在于集合中的接口，List不具备该接口</p><p>可以利用Set进行交集、并集、差集操作，可以实现共同关注、共同粉丝等功能。</p><p><strong>常用指令：</strong></p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525165011087-1716727704727-5.png" alt="image-20240525165011087" style="zoom: 67%;"><p><strong>应用场景：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>**存放的数据不能重复的场景：**UV统计（统计量大的话，还是HyperLogLog更合适）、点赞信息等<br><strong>相关指令</strong>：<code>SCARD</code>（获取集合元素数量）</p></li><li class="lvl-2"><p><strong>需要获取多个数据源的交集、并集、差集信息时</strong><br>如：共同好友(交集)、共同粉丝(交集)、共同关注(交集)、好友推荐（差集）、音乐推荐（差集）、订阅号推荐（差集+交集）<br><strong>相关指令</strong>：<code>SINTER</code>（交集）、<code>SINTERSTORE</code> （交集）、<code>SUNION</code> （并集）、<code>SUNIONSTORE</code>（并集）、<code>SDIFF</code>（差集）、<code>SDIFFSTORE</code> （差集）</p></li><li class="lvl-2"><p>需要<strong>随机获取数据源中的元素时</strong>，如抽奖、点名<br><strong>相关指令</strong>：<code>SPOP</code>（随机获取集合中的元素并移除，适合不允许重复中奖的场景）、<code>SRANDMEMBER</code>（随机获取集合中的元素，适合允许重复中奖的场景</p></li></ul><h3 id="ZSet">ZSet</h3><p>ZSet相比于Set，增加里一个<strong>权重参数<code>score</code></strong>，使集合中的元素可以按照权重排序，还可以通过权重范围获取元素列表</p><p><strong>Redis有序集合的底层：</strong></p><p><strong>ZSet的底层是跳表和压缩链表ziplist，为什么不是平衡树、红黑树、B+树？</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>平衡树 vs 跳表：<strong>平衡树的</strong>插入</strong>、<strong>删除</strong>和<strong>查询</strong>的时间复杂度和跳表一样都是 <strong>O(log n)</strong>。对于范围查询来说，平衡树也可以通过中序遍历的方式达到和跳表一样的效果。但是它的每一次插入或者删除操作都需要保证整颗树左右节点的绝对平衡，只要不平衡就要通过旋转操作来保持平衡，这个过程是比较耗时的。跳表诞生的初衷就是为了克服平衡树的一些缺点。<strong>跳表使用概率平衡而不是严格强制的平衡</strong>，因此，跳表中的插入和删除算法比平衡树的等效算法简单得多，速度也快得多。</p></li><li class="lvl-2"><p>**红黑树 vs 跳表：**相比较于红黑树来说，跳表的实现也更简单一些，不需要通过旋转和染色（红黑变换）来保证黑平衡。并且，<strong>按照区间来查找数据这个操作，红黑树的效率没有跳表高。</strong></p></li><li class="lvl-2"><p><strong>B+树 vs 跳表：</strong> <strong>B+树</strong>更适合作为<strong>数据库</strong>和<strong>文件系统</strong>中常用的索引结构之一，它的<strong>核心思想是通过可能少的 IO</strong> 定位到尽可能多的索引来获得查询数据。对于 Redis 这种内存数据库来说，它对这些并不感冒，因为 Redis 作为内存数据库它不可能存储大量的数据，所以对于索引不需要通过 B+树这种方式进行维护，只需按照概率进行随机维护即可，节约内存。而且<strong>使用跳表实现 zset 时相较前者来说更简单一些，在进行插入时只需通过索引将数据插入到链表中合适的位置再随机维护一定高度的索引即可，也不需要像 B+树那样插入时发现失衡时还需要对节点分裂与合并</strong></p></li></ul><p>我们通过 <code>object</code> 指令查看 zset 的数据结构，可以看到当前有序集合存储的还是是<strong>ziplist(压缩列表)</strong>。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; object encoding rankList</span><br><span class="line"><span class="string">&quot;ziplist&quot;</span></span><br></pre></td></tr></table></figure><p>设计者考虑到 Redis 数据存放于内存，为了节约宝贵的内存空间在有序集合在<strong>元素小于 64 字节</strong>且<strong>个数小于 128</strong> 的时候，会使用 ziplist，而这个阈值的默认值的设置就来自下面这两个配置项。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">zset-max-ziplist-value 64</span><br><span class="line">zset-max-ziplist-entries 128</span><br></pre></td></tr></table></figure><p>一旦有序集合中的某个元素超出这两个其中的一个阈值它就会转为 <strong>skiplist</strong>（实际是 dict+skiplist，还会借用字典来提高获取指定元素的效率。</p><p><strong>应用场景：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>需要随机获取数据源中的元素根据某个权重排序的场景相关指令：<code>ZRANGE</code> (从小到大排序)、 <code>ZREVRANGE</code> （从大到小排序）、<code>ZREVRANK</code> (指定元素排名)。</p></li><li class="lvl-2"><p>需要存储的元素有优先级或重要程度：如优先级队列</p></li></ul><h3 id="Bitmap">Bitmap</h3><p>Bitmap不是Redis的基本数据类型，而是在String类型上定义的一组面向位的操作，将其视为位向量。由于字符串是二进制安全的块，且最大长度为 512 MB，它们适合用于设置最多 2^32 个不同的位。</p><p>可以将Bitmap看作一个二进制数字（0，1）的数组，数组中每个元素的<strong>下标叫做offset</strong>（偏移量）。</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525165730721-1716727704727-6.png" alt="image-20240525165730721" style="zoom:67%;"><p><strong>常用指令：</strong></p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525165753049-1716727704727-7.png" alt="image-20240525165753049" style="zoom:50%;"><p><strong>应用场景</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>需要保存状态信息的场景，如：<strong>用户签到</strong>，<strong>活跃用户情况</strong>，<strong>用户行为统计</strong>（是否浏览过某资源）</p></li></ul><p>如果想要使用 Bitmap 统计活跃用户的话，可以使用日期（精确到天）作为 key，然后用户 ID 为 offset，如果当日活跃过就设置为 1。</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525213942483-1716727704727-8.png" alt="image-20240525213942483" style="zoom:50%;"><h3 id="HyperLogLog-基数统计">HyperLogLog(基数统计)</h3><p>使用 HyperLogLog 统计页面 UV 主要需要用到下面这两个命令：</p><p><code>PFADD key element1 element2 ...</code>：添加一个或多个元素到 HyperLogLog 中。</p><p><code>PFCOUNT key1 key2</code>：获取一个或者多个 HyperLogLog 的唯一计数。</p><h3 id="Geospatial-地理位置">Geospatial(地理位置)</h3><p><strong>基于Sorted Set</strong>实现，主要用于存储地理位置</p><p><strong>常用命令：</strong></p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525165837030-1716727704727-9.png" alt="image-20240525165837030"></p><h2 id="Redis线程模型">Redis线程模型</h2><h3 id="Redis单线程模型">Redis单线程模型</h3><p>对于读写命令，redis 一直是单线程模型，不过在 4.0 版本以后引入了多线程来执行一些大键值对的异步操作，在 6.0 后引入了多线程来处理网络请求，提高网络 IO 读写性能。</p><p>Redis 基于 <strong>Reactor 模式</strong>设计开发了一套高效的<strong>事件处理模型</strong>。( Netty 的线程模型也是基于该模式 )</p><p>这套事件处理模型对应的是 Redis 中的<strong>文件事件处理器（file event handler）</strong></p><p>由于文件事件处理器（file event handler）是<strong>单线程</strong>方式运行的，所以我们一般都说 Redis 是单线程模型。</p><ul class="lvl-0"><li class="lvl-2"><p>文件事件处理器使用 <strong>I/O 多路复用</strong>程序来同时监听多个<strong>套接字</strong>，并根据<strong>套接字</strong>目前执行的任务来为套接字关联不同的<strong>事件处理器。</strong></p></li><li class="lvl-2"><p>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关 闭（close）等操作时，与操作相对应的<strong>文件事件</strong>就会产生，这时<strong>文件事件处理器</strong>就会调用套接字之前关联好的<strong>事件处理器</strong>来处理这些事件。</p></li></ul><p><strong>虽然文件事件处理器以单线程方式运行，但通过使用 I/O 多路复用程序来监听多个套接字</strong>，文件事件处理器既实现了高性能的网络通信模型，又可以很好地与 Redis 服务器中其他同样以单线程方式运行的模块进行对接，这保持了 Redis 内部单线程设计的简单性。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>既然是单线程，如何监听大量的客户端连接呢？</strong></p><ul class="lvl-2"><li class="lvl-4">Redis 通过 <strong>IO 多路复用程序</strong> 来监听来自客户端的大量连接（或者说是监听多个 socket），它会将感兴趣的事件及类型（读、写）注册到内核中并监听每个事件是否发生。</li><li class="lvl-4"><strong>I/O 多路复用技术的使用让 Redis 不需要额外创建多余的线程来监听客户端的大量连接，降低了资源的消耗</strong>（和 NIO 中的 <code>Selector</code> 组件很像）。</li></ul></li><li class="lvl-2"><p><strong>文件事件处理器包括以下部分：</strong></p><ul class="lvl-2"><li class="lvl-4">多个 socket (客户端连接)</li><li class="lvl-4">IO 多路复用程序（支持多个客户端连接的关键）</li><li class="lvl-4">文件事件分派器（将 socket 关联到相应的事件处理器）</li><li class="lvl-4">事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li></ul><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525221336985-1716727704727-10.png" alt="image-20240525221336985"></p></li><li class="lvl-2"><p><strong>4.0 版本的多线程：</strong><br>Redis 4.0 增加的多线程主要是针对一些<strong>大键值对的删除操作的命令</strong>，使用这些命令就会使用主线程之外的其他线程来**“异步处理”<strong>，从而减少对主线程的影响。为此，Redis 4.0 之后新增了</strong>几个异步命令：**</p><ul class="lvl-2"><li class="lvl-4"><code>UNLINK</code>：可以看作是 <code>DEL</code> 命令的异步版本。</li><li class="lvl-4"><code>FLUSHALL ASYNC</code>：用于清空所有数据库的所有键，不限于当前 <code>SELECT</code> 的数据库。</li><li class="lvl-4"><code>FLUSHDB ASYNC</code>：用于清空当前 <code>SELECT</code> 数据库中的所有键。</li></ul><p>总的来说，直到 Redis 6.0 之前，Redis 的主要操作仍然是单线程处理的。<br><strong>那 Redis6.0 之前为什么不使用多线程？</strong></p><ul class="lvl-2"><li class="lvl-4"><p>单线程编程容易并且更容易维护；</p></li><li class="lvl-4"><p>Redis 的性能瓶颈不在 CPU ，主要在内存和网络；</p></li><li class="lvl-4"><p>多线程就会存在死锁、线程上下文切换等问题，甚至会影响性能。</p></li></ul></li><li class="lvl-2"><p><strong>6.0 版本新增的多线程</strong><br><strong>Redis6.0 引入多线</strong><br><strong>程主要是为了提高网络 IO 读写性能</strong>，因为这个算是 Redis 中的一个性能瓶颈**（Redis 的瓶颈主要受限于内存和网络）**<br>虽然，Redis6.0 引入了多线程，但是 Redis 的多线程只是在网络数据的读写这类耗时操作上使用了，执行命令仍然是单线程顺序执行。因此，你也不需要担心线程安全问题。</p></li></ul><h3 id="Redis后台线程">Redis后台线程</h3><ul class="lvl-0"><li class="lvl-2"><p>我们虽然经常说 Redis 是单线程模型（主要逻辑是单线程完成的），但实际还有一些后台线程用于执行一些比较耗时的操作：</p><ul class="lvl-2"><li class="lvl-4">通过 <code>bio_close_file</code> 后台线程来释放 AOF / RDB 等过程中产生的临时文件资源。</li><li class="lvl-4">通过 <code>bio_aof_fsync</code> 后台线程调用 <code>fsync</code> 函数将系统内核缓冲区还未同步到到磁盘的数据强制刷到磁盘（ AOF 文件）。</li><li class="lvl-4">通过 <code>bio_lazy_free</code>后台线程释放大对象（已删除）占用的内存空间.</li></ul></li></ul><h2 id="Redis为什么这么快？">Redis为什么这么快？</h2><ul class="lvl-0"><li class="lvl-2"><p>Redis <strong>基于内存</strong>，内存的访问速度比磁盘快很多；</p></li><li class="lvl-2"><p>Redis 基于 <strong>Reactor 模式设计</strong>开发了一套<strong>高效的事件处理模型</strong>，主要是<strong>单线程事件循环</strong>和 <strong>IO 多路复用</strong>（Redis 线程模式后面会详细介绍到）；</p></li><li class="lvl-2"><p>Redis 内置了多种优化过后的数据类型/结构实现，性能非常高。</p></li><li class="lvl-2"><p>Redis 通信协议实现简单且解析高效。</p></li></ul><p>那既然都这么快了，为什么不直接用 Redis 当主数据库呢？主要是因为内存成本太高且 Redis 提供的数据持久化仍然有数据丢失的风险。</p><p>虽然，Redis6.0 引入了多线程，但是 Redis 的多线程只是在<strong>网络数据的读写</strong>这类耗时操作上使用了，<strong>执行命令仍然是单线程顺序执行</strong>。因此，你也不需要担心线程安全问题。</p><h2 id="为什么用Redis">为什么用Redis?</h2><ul class="lvl-0"><li class="lvl-2"><p>访问速度快</p></li><li class="lvl-2"><p>高并发</p></li><li class="lvl-2"><p>一般像 MySQL 这类的数据库的 QPS 大概都在 4k 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 5w+，甚至能达到 10w+（就单机 Redis 的情况，Redis 集群的话会更高）。<br>QPS（Query Per Second）：服务器每秒可以执行的查询次数；</p></li><li class="lvl-2"><p>功能全面除了做缓存，redis还可以做分布式锁、限流、消息队列、延时队列、分布式Session等</p></li></ul><h2 id="Redis缓存读写策略">Redis缓存读写策略</h2><h3 id="旁路缓存模式（Cache-Aside-Pattern"><strong>旁路缓存模式（Cache Aside Pattern)</strong></h3><p>人工编码方式，缓存调用者在更新完数据库后再去更新缓存，也成为双写方案。</p><p>服务器同时维护cache和db，并且是以db的结果为准</p><p>比较适合请求比较多的场景。</p><p>​<strong>缓存读写步骤：</strong>​写：先更新DB，再删除缓存​读：从cache中读取缓存，读取到就直接返回；未读取到就查DB，从DB中直接返回，然后重建缓存</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525184121578-1716727704727-11.png" alt="image-20240525184121578" style="zoom: 67%;"><p>​先更新数据库，再删除缓存，也是有可能出现双写不一致性问题的，比如：当前缓存不存在目标数据，线程A查询缓存，未命中缓存，然后线程A查数据库，查到数据后，在重构缓存之前，切换到线程B，线程B修改数据库目标数据，然后删除缓存，此时切换到线程A，线程A重构缓存，这样就出现了缓存和数据库不一致的问题。</p><p><strong>旁路缓存模式的缺陷：</strong></p><ol><li class="lvl-3"><p>首次请求数据一定不在cache中<br>解决方法：缓存预热</p></li><li class="lvl-3"><p>写操作频繁的话，会导致cache中的数据被频繁删除，影响缓存命中率解决方法：（1）采用db和cache强一致性：更新db时，保证cache更新，需要加锁来完成（分布式锁）（2）短暂地允许cache和db不一致，更新 db 的时候同样更新 cache，但是给缓存加一个比较短的过期时间，这样的话就可以保证即使数据不一致的话影响也比较小。</p></li></ol><h3 id="读写穿透模式（Read-Write-Through-Pattern"><strong>读写穿透模式（Read/Write Through Pattern)</strong></h3><p>​把cache视为主要数据存储，对其进行读写，cache服务负责将此数据写入db中，从而减轻了应用程序的职责。</p><p>​用的较少，我们经常使用的分布式缓存 Redis 并没有提供 cache 将数据写入 db 的功能。</p><p>​<strong>缓存读写步骤：</strong>​写：先查cache，未命中则直接更新db；若命中，则先更新cache，然后cache服务自己更新db​读：从cache中读取数据，命中直接返回；未命中则从db加载，先重建缓存后响应数据</p><h3 id="异步缓存写入模式（Write-Behind-Pattern"><strong>异步缓存写入模式（Write Behind Pattern)</strong></h3><p>​调用者只操作缓存，其他线程去异步处理数据库，最终实现一致。</p><p>​Write Behind Pattern 和 Read/Write Through Pattern 很相似，两者都是由 cache 服务来负责 cache 和 db 的读写。</p><p>​但是，两个又有很大的不同：<strong>Read/Write Through 是同步更新 cache 和 db，而 Write Behind 则是只更新缓存，不直接更新 db，而是改为异步批量的方式来更新 db。</strong></p><p>​很明显，这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。</p><p>​这种策略在我们平时开发过程中也非常非常少见，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。</p><p>​Write Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量</p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525195602137-1716727704727-12.png" alt="image-20240525195602137"></p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525195611485-1716727704727-13.png" alt="image-20240525195611485"></p><h2 id="缓存三兄弟">缓存三兄弟</h2><h3 id="缓存穿透">缓存穿透</h3><p>缓存穿透是指查询一个缓存和数据库都不存在的数据，这将导致这个不存在的数据每次请求都要到 DB 去查询，可能导致 DB 挂掉。这种情况大概率是遭到了攻击。</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240328151854168.png" alt="image-20240328151854168" style="zoom:67%;" align="left"><h4 id="缓存空值">缓存空值</h4><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309155058324.png" alt="image-20240309155058324"></p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309155838160.png" alt="image-20240309155838160"></p><p><strong>缓存预热</strong>是一种在应用程序启动或缓存失效之后，主动将热点数据加载到缓存中的策略。这样，在实际请求到达应用程序时，热点数据已经存在于缓存中，从而减少了缓存未命中的情况，提高了应用程序的响应速度。</p><h4 id="布隆过滤器">布隆过滤器</h4><p>布隆过滤器主要是用于检索一个元素是否在一个集合中。我们当时使用的是redisson实现的布隆过滤器。</p><p>它的底层主要是先去初始化一个比较大数组，里面存放的二进制0或1。在一开始都是0，当一个key来了之后经过3次hash计算，模于数组长度找到数据的下标然后把数组中原来的0改为1，这样的话，三个数组的位置就能标明一个key的存在。查找的过程也是一样的。</p><p>当然是有缺点的，布隆过滤器有可能会产生一定的误判，我们一般可以设置这个误判率，大概不会超过5%，其实这个误判是必然存在的，要不就得增加数组的长度，其实已经算是很划算了，5%以内的误判率一般的项目也能接受，不至于高并发下压倒数据库。</p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525195641720-1716727704727-14.png" alt="image-20240525195641720"></p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525195649976-1716727704727-15.png" alt="image-20240525195649976"></p><h4 id="接口限流">接口限流</h4><p>根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采取黑名单机制，例如将异常 IP 列入黑名单。</p><p>后面提到的缓存击穿和雪崩都可以配合接口限流来解决，毕竟这些问题的关键都是有很多请求落到了数据库上造成数据库压力过大。</p><h3 id="缓存击穿">缓存击穿</h3><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240525203241837-1716727704727-16.png" alt="image-20240525203241837"></p><h4 id="互斥锁、逻辑过期">互斥锁、逻辑过期</h4><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309163036528.png" alt="image-20240309163036528"></p><p><strong>互斥锁：</strong><br>因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行，我们可以采用tryLock方法 + double check来解决这样的问题。假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了</p><p><strong>逻辑过期</strong>：不在Redis数据中设置有效期属性，而是在value中添加逻辑有效期字段我们之所以会出现这个缓存击穿问题，主要原因是在于我们对key设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题，但是不设置过期时间，这样数据不就一直占用我们内存了吗，我们可以采用逻辑过期方案。具体为：当线程1读取缓存，发现缓存过期后，会申请得到互斥锁，然后开启一个线程来查询数据重构缓存，然后返回过期数据；在后台线程释放锁之前，其他线程读取到过期缓存后，没有拿到互斥锁并不会被阻塞，而是直接返回过期的脏数据。<br><strong>优点是异步地构建缓存，缺点是缓存重构完成之前，其他线程返回的都是脏数据。</strong></p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240328153910223.png" alt="image-20240328153910223" style="zoom: 67%;"><h3 id="缓存雪崩">缓存雪崩</h3><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309163354767.png" alt="image-20240309163354767"></p><p>或者设置定时任务，更新过期时间</p><h4 id="针对Redis服务宕机的情况">针对Redis服务宕机的情况</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>Redis 集群</strong>：采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。Redis Cluster 和 Redis Sentinel 是两种最常用的 Redis 集群实现方案</p></li><li class="lvl-2"><p><strong>多级缓存</strong>：设置多级缓存，例如本地缓存+Redis 缓存的二级缓存组合，当 Redis 缓存出现问题时，还可以从本地缓存中获取到部分数据。</p></li></ul><h4 id="针对大量缓存同时失效的情况">针对大量缓存同时失效的情况</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>设置随机失效时间</strong>（可选）：为缓存设置随机的失效时间，例如在固定过期时间的基础上加上一个随机值，这样可以避免大量缓存同时到期，从而减少缓存雪崩的风险。</p></li><li class="lvl-2"><p><strong>提前预热</strong>（推荐）：针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。</p></li><li class="lvl-2"><p><strong>持久缓存策略</strong>（看情况）：虽然一般不推荐设置缓存永不过期，但对于某些关键性和变化不频繁的数据，可以考虑这种策略、</p></li></ul><h2 id="缓存预热">缓存预热</h2><p>常见的缓存预热方式有两种：</p><ol><li class="lvl-3"><p>使用<strong>定时任务</strong>，比如 xxl-job，来定时触发缓存预热的逻辑，将数据库中的<strong>热点数据</strong>查询出来并存入缓存中。</p></li><li class="lvl-3"><p>使用<strong>消息队列</strong>，比如 Kafka，来异步地进行缓存预热，将数据库中的热点数据的主键或者 ID 发送到消息队列中，然后由<strong>缓存服务消费</strong>消息队列中的数据，根据主键或者 ID 查询数据库并更新缓存</p></li></ol><h2 id="双写一致性">双写一致性</h2><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240328174634915.png" alt="image-20240328174634915" style="zoom:67%;"><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240328174655246.png" alt="image-20240328174655246"></p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309165448439.png" alt="image-20240309165448439"></p><p>一般数据库采用的是主从模式，主从数据库同步需要时间</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240317204441365.png" alt="image-20240317204441365" style="zoom: 67%;"><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240317205137985.png" alt="image-20240317205137985" style="zoom:67%;"><h3 id="要求强一致性：用读写锁">要求强一致性：用读写锁</h3><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309170037181.png" alt="image-20240309170037181"></p><p>但效率低，为了提高效率，改用读写锁，读的时候上共享锁，此时其他线程对该数据只能读不能写，写的时候上排他锁，此时其他线程不能读也不能写</p><p>以下为redisson实现的读写锁</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240317210145873.png" alt="image-20240317210145873" style="zoom:50%;"><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240317210327844.png" alt="image-20240317210327844" style="zoom: 67%;"><h3 id="允许延迟一致：保证数据的最终一致，用异步通知">允许延迟一致：保证数据的最终一致，用异步通知</h3><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309170151593.png" alt="image-20240309170151593"></p><h2 id="数据持久化">数据持久化</h2><h3 id="RDB">RDB</h3><p>snapshotting 快照 RDB</p><p>Redis 可以通过创建快照来获得存储在内存里面的数据在 <strong>某个时间点</strong> 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309171013569.png" alt="image-20240309171013569" style="zoom:50%;"><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309171351195.png" alt="image-20240309171351195"></p><p><strong>Redis 提供了两个命令来生成 RDB 快照文件：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><code>save</code> : 同步保存操作，会阻塞 Redis 主线程；</p></li><li class="lvl-2"><p><code>bgsave</code> : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。</p></li></ul><h3 id="AOF">AOF</h3><p>与快照持久化相比，AOF 持久化的<strong>实时性更好</strong>。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化（Redis 6.0 之后已经默认是开启了），可以通过 <code>appendonly</code> 参数开启：</p><p>开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 <code>server.aof_buf</code> 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区未同步到磁盘），最后再根据持久化方式（ <code>fsync</code>策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的。</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309171530051.png" alt="image-20240309171530051" style="zoom:50%;"><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309171916468.png" alt="image-20240309171916468"></p><h4 id="AOF的工作流程">AOF的工作流程</h4><ul class="lvl-0"><li class="lvl-2"><p>命令追加（append）：将所有写命令追加到AOF缓冲区中</p></li><li class="lvl-2"><p>文件写入（write）：将AOF缓冲区的数据写入系统内核缓冲区</p></li><li class="lvl-2"><p>文件同步（fsync）：AOF缓冲区根据对应的持久化方式（fsync策略）向硬盘同步操作，这一步需要调用fsync函数（系统调用），fsync针对单个文件操作，对其进行强制硬盘同步，<strong><code>fsync</code> 将阻塞直到写入硬盘完成后返回</strong>，保证了数据持久化。</p></li><li class="lvl-2"><p>文件重写（rewirte)：随着AOF文件越来越大，定时对AOF文件进行重写，达到压缩目的，<strong>由子线程执行</strong></p></li><li class="lvl-2"><p>重新加载（road)：redis重启时，加载AOF文件进行数据恢复</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240411222915047.png" alt="image-20240411222915047" style="zoom: 67%;"></li></ul><h4 id="刷盘策略（AOF持久化策略）">刷盘策略（AOF持久化策略）</h4><ul class="lvl-0"><li class="lvl-2"><p>appendfsync always：<strong>主线程</strong>调用==<strong>write</strong>==后，<strong>后台线程</strong>会<strong>立刻调用fsync</strong>函数同步AOF文件，fsync完成后线程返回，会严重降低redis的性能（write+fsync)</p></li><li class="lvl-2"><p>appendfsync everysec：<strong>主线程</strong>调用<strong>write</strong>后，执行操作后<strong>立即返回</strong>，由<strong>后台线程每秒钟</strong>调用一次<strong>fsync</strong>来同步一次AOF文件(write+fsync，fsync间隔为1秒)</p></li><li class="lvl-2"><p>appendfsync no：<strong>主线程</strong>调用 <strong>write</strong> 执行写操作后<strong>立即返回</strong>，让<strong>操作系统决定何时进行同步</strong>，Linux 下一般为 30 秒一次（write但不fsync，fsync 的时机由操作系统决定）。</p></li></ul><p><strong>记录日志的时机：命令执行完成之后。为什么？</strong></p><ul class="lvl-0"><li class="lvl-2"><p>避免额外的检查开销，AOF记录日志不会对语法进行检查</p></li><li class="lvl-2"><p>在命令执行完之后再记录，不会阻塞当前命令的执行但也带来了风险：</p><ul class="lvl-2"><li class="lvl-4">如果刚执行完命令，redis就宕机了，会导致对应记录的丢失</li><li class="lvl-4">可能会阻塞后续其他命令的执行，<strong>因为AOF记录日志实在redis主线程中执行的。</strong></li></ul></li></ul><h3 id="对比">对比</h3><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309171955634.png" alt="image-20240309171955634" style="zoom:50%;"><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309172248463.png" alt="image-20240309172248463" style="zoom: 50%;"><p><strong>RDB比AOF优秀的地方：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>RDB存储的是<strong>经过压缩后的二进制数据</strong>，保存某个时间点的内存快照，<strong>文件很小</strong>，适合做数据的备份、灾难恢复。AOF文件存储的是每一次的写命令，类似于MySQL的Binlog，通常比RDB文件大得多，<strong>而AOF文件过大时，会进行AOF文件重写</strong>，新的AOF比原有的AOF更小，但所保存的数据库状态一样。在Redis7.0之前，如果在重写期间有写入命令，AOF可能会使用大量内存，重写期间到达的写入命令都会写入磁盘两次。</p></li><li class="lvl-2"><p>使用RDB进行数据恢复，直接解析还原数据即可，不需要一条一条地执行命令，速度很快。而AOF需要依次执行每个命令，速度比较慢，也就是说，恢复大数据的时候，rdb比aof快。</p></li></ul><p><strong>AOF比RDB优秀的地方：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>RDB安全性不如AOF</strong>，没有办法实时或秒级持久化数据。生成RDB文件的过程是比较繁重的，虽然bgsave命令调用后台线程进行RBD文件的写入，但会对CPU资源产生影响，严重的话甚至会使Redis服务宕机。而AOF仅仅是追加命令到文件，操作轻量，且支持秒级持久化。<strong>RDB在两次备份之间，可能会有数据备份的遗漏。</strong></p></li><li class="lvl-2"><p>RDB保存的是压缩后的二进制数据，且在Redis版本的迭代中，老版本的redis并不一定支持新版本的RDB文件。</p></li><li class="lvl-2"><p>AOF易于理解和解析。</p></li></ul><p><strong>综上：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>对安全性要求不高，可以用RDB</p></li><li class="lvl-2"><p>不建议单独使用AOF，因为时不时地创建一个RDB快照可以进行数据库备份，更快地重启以及解决AOF引擎错误。</p></li><li class="lvl-2"><p>如果对安全性要求高，建议使用混合持久化。</p></li></ul><h3 id="校验机制">校验机制</h3><p>AOF校验是Redis在启动时对aof文件进行检查，检查其完整性、内容是否有损坏、数据是否有丢失。采用校验和来进行校验，采用的是CRC64算法，将校验和放在AOF文件的末尾，Redis启动的时候会计算文件的校验和，然后和文件末尾的校验和进行比对，若不一致，redis则提供错误信息。相应的，rdb也有类似的校验机制。</p><h2 id="数据过期删除策略">数据过期删除策略</h2><ul class="lvl-0"><li class="lvl-2"><p>**惰性删除：**只会在取出/查询 key 的时候才对数据进行过期检查。这种方式对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。</p></li><li class="lvl-2"><p>**定期删除：**周期性地随机从设置了过期时间的 key 中抽查一批，然后逐个检查这些 key 是否过期，过期就删除 key。相比于惰性删除，定期删除对内存更友好，对 CPU 不太友好。</p></li><li class="lvl-2"><p>**延迟队列：**把设置过期时间的 key 放到一个延迟队列里，到期之后就删除 key。这种方式可以保证每个过期 key 都能被删除，但维护延迟队列太麻烦，队列本身也要占用资源。</p></li><li class="lvl-2"><p>**定时删除：**每个设置了过期时间的 key 都会在设置的时间到达时立即被删除。这种方法可以确保内存中不会有过期的键，但是它对 CPU 的压力最大，因为它需要为每个键都设置一个定时器。</p></li></ul><p>Redis 采用的是<strong>定期删除+惰性/懒汉式删除</strong>结合的策略。</p><p>Redis 的定期删除过程是随机的（周期性地随机从设置了过期时间的 key 中抽查一批），所以<mark>并不保证所有过期键都会被立即删除</mark>。这也就解释了为什么有的 key 过期了，并没有被删除。并且，Redis 底层会<strong>通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响</strong>。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>控制删除操作的时长</strong>：执行时间已经超过了阈值，那么就中断这一次定期删除循环，以避免使用过多的 CPU 时间。</p></li><li class="lvl-2"><p><strong>控制删除操作的频率</strong>：如果这一批过期的 key 比例超过一个比例，就会重复执行此删除流程，以更积极地清理过期 key。相应地，如果过期的 key 比例低于这个比例，就会中断这一次定期删除循环，避免做过多的工作而获得很少的内存回收。</p></li></ul><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309172533656.png" alt="image-20240309172533656"></p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309173007463.png" alt="image-20240309173007463"></p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309173423123.png" alt="image-20240309173423123"></p><h2 id="数据淘汰策略">数据淘汰策略</h2><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309173640388.png" alt="image-20240309173640388"></p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309174123755.png" alt="image-20240309174123755"></p><p><mark><strong>范围：allkeys/volatile</strong></mark></p><p><mark><strong>策略：lru/lfu/random</strong></mark></p><p><mark><strong>外加：volatile-ttl、no-eviction</strong></mark></p><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309174300755.png" alt="image-20240309174300755"></p><p><strong>平时用的比较多的是 allkeys-lru</strong></p><h2 id="分布式锁">分布式锁</h2><p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240309174732844.png" alt="image-20240309174732844"></p><ul class="lvl-0"><li class="lvl-2"><p><strong>分布式锁应具备的条件：</strong><br><strong>互斥</strong>：任意一个时刻，锁只能被一个线程持有。<br><strong>高可用</strong>：锁服务是高可用的，当一个锁服务出现问题，能够自动切换到另外一个锁服务。并且，即使客户端的释放锁的代码逻辑出现问题，锁最终一定还是会被释放，不会影响其他线程对共享资源的访问。这一般是通过超时机制实现的。<br><strong>可重入</strong>：一个节点获取了锁之后，还可以再次获取锁。除了上面这三个基本条件之外，一个好的分布式锁还需要满足下面这些条件：<br><strong>高性能</strong>：获取和释放锁的操作应该快速完成，并且不应该对整个系统的性能造成过大影响。<br><strong>非阻塞</strong>：如果获取不到锁，不能无限期等待，避免对系统正常运行造成影响。</p></li></ul><h3 id="分布式锁的实现方案">分布式锁的实现方案</h3><h4 id="Redis">Redis</h4><p>SETNX、Redisson</p><h4 id="ZooKeeper">ZooKeeper</h4><p>ZooKeeper 分布式锁是基于 <strong>临时顺序节点</strong> 和 <strong>Watcher（事件监听器）</strong> 实现的。</p><p>临时节点的生命周期是与客户端会话（session）绑定的，会话消失则节点消失，临时节点只能做叶子节点</p><ul class="lvl-0"><li class="lvl-2"><p><strong>获取锁</strong>：</p><ul class="lvl-2"><li class="lvl-4">首先我们要有一个持久节点<code>/locks</code>，客户端获取锁就是在<code>locks</code>下创建临时顺序节点。</li><li class="lvl-4">假设客户端 1 创建了<code>/locks/lock1</code>节点，创建成功之后，会判断 <code>lock1</code>是否是 <code>/locks</code> 下最小的子节点。</li><li class="lvl-4">如果 <code>lock1</code>是最小的子节点，则获取锁成功。否则，获取锁失败。</li><li class="lvl-4">如果获取锁失败，则说明有其他的客户端已经成功获取锁。客户端 1 <strong>并不会不停地循环去尝试加锁</strong>，而是在前一个节点比如<code>/locks/lock0</code>上注册一个<strong>事件监听器</strong>。这个监听器的作用是当前一个节点释放锁之后通知客户端 1（<strong>避免无效自旋</strong>），这样客户端 1 就加锁成功了。</li></ul></li><li class="lvl-2"><p><strong>释放锁</strong></p><ul class="lvl-2"><li class="lvl-4">成功获取锁的客户端在执行完业务流程之后，会将对应的子节点删除。</li><li class="lvl-4">成功获取锁的客户端在出现故障之后，对应的子节点由于是临时顺序节点，也会被自动删除，避免了锁无法被释放。</li><li class="lvl-4">前面说的事件监听器其实监听的就是这个子节点删除事件，子节点删除就意味着锁被释放。</li></ul></li></ul><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240411191731597.png" alt="image-20240411191731597" style="zoom:67%;" align="left"><p>注：lock节点是持久节点</p><ul class="lvl-0"><li class="lvl-2"><p><strong>两个方案如何选择？</strong></p><ul class="lvl-2"><li class="lvl-4">如果对<strong>性能</strong>要求比较高的话，建议使用 <strong>Redis</strong> 实现分布式锁（优先选择 Redisson 提供的现成的分布式锁，而不是自己实现）</li><li class="lvl-4">如果对<strong>可靠</strong>性要求比较高的话，建议使用 <strong>ZooKeeper</strong> 实现分布式锁（推荐基于 Curator 框架实现）。不过，现在很多项目都不会用到 ZooKeeper，如果单纯是因为分布式锁而引入 ZooKeeper 的话，那是不太可取的，不建议这样做，为了一个小小的功能增加了系统的复杂度。</li></ul></li></ul><h3 id="如何实现可重入？">如何实现可重入？</h3><p>可重入是指，在一个线程中，可以多次获取同一把锁，比如一个线程正在执行一个带锁的方法，该方法调用了另一个需要相同锁的方法，则该线程可以直接执行调用的方法，这就是可重入，无需重新获得锁对象。</p><p>可重入锁的核心思想是，线程在请求锁的时候<strong>判断是否为自己的锁</strong>，如果是，则不用重新获取了。此外，还要为每个锁关联一个<strong>可重入计数器</strong>和<strong>占有它的线程</strong>，当计数器的值&gt;0时，则锁被占有，需要判断占有锁的线程和请求锁的线程是否是同一个。</p><h3 id="如何解决集群下分布式锁的可靠性？">如何解决集群下分布式锁的可靠性？</h3><p>redis 红锁</p><p>zookeeper</p><h3 id="接口的幂等性-⭐TODO">接口的幂等性 ⭐TODO</h3><p>在分布式系统中，幂等(idempotency)是对请求操作结果的一个描述，这个描述就是不论执行多少次相同的请求，产生的效果和返回的结果都和发出单个请求是一样的。</p><p>假如咱们的前后端没有保证接口幂等性，我作为用户在秒杀商品的时候，我同时点击了多次秒杀商品按钮，后端处理了多次相同的订单请求，结果导致一个人秒杀了多个商品。这个肯定是不能出现的，属于非常严重的 bug 了！</p><p>前端保证幂等性的话比较简单，一般通过当用户提交请求后将按钮致灰来做到。后端保证幂等性就稍微麻烦一点，方法也是有很多种，比如：</p><ol><li class="lvl-3"><p>同步锁；</p></li><li class="lvl-3"><p>分布式锁；</p></li><li class="lvl-3"><p>业务字段的唯一索性约束，防止重复数据产生。</p></li><li class="lvl-3"><p>…</p></li></ol><h2 id="Redis性能优化">Redis性能优化</h2><h3 id="使用批量操作减少网络传输">使用批量操作减少网络传输</h3><p>一条redis命令的执行步骤可以分为四步：发<strong>送命令，命令排队，执行命令，返回结果。</strong></p><p>其中第一步和第四步耗时之和称为<strong>Round Trip Time（RTT , 往返时间）</strong>，就是数据在网络上传输的时间。</p><p>使用批量操作可以减少网络传输次数，进而减少网络开销，大幅减少RTT。</p><p><strong>批量操作的方法</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>原生批量操作命令</strong>：</p><ul class="lvl-2"><li class="lvl-4"><code>MGET</code>(获取一个或多个指定 key 的值)、<code>MSET</code>(设置一个或多个指定 key 的值)、</li><li class="lvl-4"><code>HMGET</code>(获取指定哈希表中一个或者多个指定字段的值)、<code>HMSET</code>(同时将一个或多个 field-value 对设置到指定哈希表中)、</li><li class="lvl-4"><code>SADD</code>（向指定集合添加一个或多个元素）</li></ul><p>但是，在 Redis 官方提供的分片集群解决方案 Redis Cluster 下，使用这些原生操作无法保证所有的 Key 都在同一个 hash slot 哈希槽上，所以这些原生批量操作还是有可能进行多次网络传输，不过相对于非批量操作，还是可以减少网络传输次数。</p></li><li class="lvl-2"><p><strong>pipline</strong><br>对于不支持批量操作的命令，我们可以利用 <strong>pipeline（流水线)</strong> 将一批 Redis 命令封装成一组，这些 Redis 命令会被一次性提交到 Redis 服务器，只需要一次网络传输。不过，需要注意控制一次批量操作的 <strong>元素个数</strong>(例如 500 以内，实际也和元素字节数有关)，避免网络传输的数据量过大。与<code>MGET</code>、<code>MSET</code>等原生批量操作命令一样，pipeline 同样在 Redis Cluster 上使用会存在一些小问题。原因类似，无法保证所有的 key 都在同一个 <strong>hash slot</strong>（哈希槽）上。如果想要使用的话，客户端需要自己维护 key 与 slot 的关系。</p><p><strong>原生批量操作命令和 pipeline 的是有区别的，使用的时候需要注意</strong>：</p><ul class="lvl-2"><li class="lvl-4"><p>原生批量操作命令是原子操作，pipeline 是非原子操作。</p></li><li class="lvl-4"><p>pipeline 可以打包不同的命令，原生批量操作命令不可以。</p></li><li class="lvl-4"><p>原生批量操作命令是 Redis 服务端支持实现的，而 pipeline 需要服务端和客户端的共同实现。</p></li></ul></li><li class="lvl-2"><p><strong>Lua脚本</strong></p></li></ul><h3 id="大量key集中过期影响性能">大量key集中过期影响性能</h3><p>对于过期的Key，redis采用的是定时删除+惰性删除模式。定时删除任务执行时，若突然遇到大量过期Key，客户端必须等待定时清理任务线程执行完成，这个<strong>定时清理</strong>任务线程实在redis<strong>主线程</strong>执行的，这就导致客户端的请求无法被即使处理。</p><p><strong>解决方案：</strong></p><ol><li class="lvl-3"><p>给key设置随机过期时间</p></li><li class="lvl-3"><p>开启lazy-free（惰性删除/延迟释放），让redis采用异步的方式删除过期key，该操作会交给子线程执行，从而避免阻塞主线程。</p></li></ol><h3 id="Bigkey影响性能">Bigkey影响性能</h3><p>redis中，如果一个key的value过大，则被视为bigkey。</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240412203613497.png" alt="image-20240412203613497" style="zoom:80%;"><p>String 类型的value超过<strong>1MB</strong>，复合类型（List, Hash, Set, ZSet）的 value 元素超过<strong>5000个</strong></p><p><strong>bigkey会对redis性能造成影响：</strong><br>bigkey 会占用更多的内存和网络带宽，会造成阻塞问题：</p><ul class="lvl-0"><li class="lvl-2"><p>客户端超时阻塞：redis执行命令是单线程进行，在操作bigkey时会比较耗时，那么就会阻塞redis，从客户端的角度来看，就是很久没有得到服务端的响应。</p></li><li class="lvl-2"><p>网络阻塞：每次获取bigkey的网络流量比较大，若一个bigkey大小为1MB，qps = 1000，那么每秒就会产生1000MB的流量，对于普通千兆网卡的服务器来说压力很大。</p></li><li class="lvl-2"><p>工作线程阻塞：如果使用del删除bigkey时，会阻塞工作线程，会导致排队的命令无法执行。</p></li></ul><p><strong>bigkey是如何产生的？</strong></p><ul class="lvl-0"><li class="lvl-2"><p>程序设计不当，比如直接使用 <strong>String</strong> 类型存储较<strong>大的文件对应的二进制数据</strong>。</p></li><li class="lvl-2"><p>对于业务的数据规模考虑不周到，比如使用集合类型的时候没有考虑到数据量的快速增长。</p></li><li class="lvl-2"><p>未及时清理垃圾数据，比如<strong>哈希中冗余了大量的无用键值对</strong>。</p></li></ul><p><strong>如何处理bigkey?</strong></p><ul class="lvl-0"><li class="lvl-2"><p>分割 bigkey：将一个 bigkey 分割为多个小 key。例如，将一个含有上万字段数量的 Hash 按照一定策略（比如二次哈希）拆分为多个 Hash。</p></li><li class="lvl-2"><p>手动清理：Redis 4.0+ 可以使用 <code>UNLINK</code> 命令来<strong>异步删除</strong>一个或多个指定的 key。Redis 4.0 以下可以考虑使用 <code>SCAN</code> 命令结合 <code>DEL</code> 命令来分批次删除。</p></li><li class="lvl-2"><p>采用合适的数据结构：例如，文件二进制数据不使用 String 保存、使用 <strong>HyperLogLog</strong> 统计页面 UV、<strong>Bitmap</strong> 保存状态信息（0/1）。</p></li><li class="lvl-2"><p>开启 lazy-free（惰性删除/延迟释放） ：lazy-free 特性是 Redis 4.0 开始引入的，指的是让 Redis 采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程。</p></li></ul><h3 id="Hotkey影响性能">Hotkey影响性能</h3><p>如果一个key的访问次数比较多且明显多于其他key，则该key可以看作hotkey；</p><p>比如Redis实例每秒处理的请求为5000，其中2000是处理某个key，则该key可以视为hotkey</p><p><strong>Hotkey的危害</strong>：</p><p>处理 hotkey 会占用大量的 CPU 和带宽，可能会影响 Redis 实例对其他请求的正常处理。此外，如果突然访问 hotkey 的请求超出了 Redis 的处理能力，Redis 就会直接宕机。这种情况下，大量请求将落到后面的数据库上，可能会导致数据库崩溃。</p><p><strong>如何发现hotkey?</strong></p><ul class="lvl-0"><li class="lvl-2"><p>可以使用–hotkeys参数来查找，不过前提是，redis的maxmemory-policy设置为LFU，redis 的maxmemory-policy有volatile-lfu和allkeys-lfu</p></li><li class="lvl-2"><p>使用MONITOR命令，该命令可以实时查看redis的所有操作，可以用于临时监控redis实例的操作情况，包括读、写，但对性能形象太大，禁止长期使用。</p></li></ul><p><strong>如何解决hotkey?</strong></p><ul class="lvl-0"><li class="lvl-2"><p>读写分离：主节点处理写请求，从节点处理读请求。</p></li><li class="lvl-2"><p>使用 Redis Cluster：将热点数据分散存储在多个 Redis 节点上。</p></li><li class="lvl-2"><p>二级缓存：hotkey 采用二级缓存的方式进行处理，将 hotkey 存放一份到 JVM 本地内存中（可以用 Caffeine）。</p></li></ul><h3 id="慢查询命令">慢查询命令</h3><p>redis命令执行步骤为：发送命令、命令排队、命令执行、返回结果</p><p><strong>慢查询针对的是命令执行这一步。</strong></p><p>在<code>redis.conf</code>中，使用<code>slow-log-slower-than</code>参数设置耗时命令的阈值，并使用<code>slowlog-max-len</code>设置记录耗时命令的最大条数。</p><p>使用<code>SLOWLOG GET</code>获取慢查询日志</p><h3 id="Redis常见阻塞原因">Redis常见阻塞原因</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>O(n) 命令</strong><br>Redis 中的大部分命令都是 O(1)时间复杂度，但也有少部分 O(n) 时间复杂度的命令，例如：</p><ul class="lvl-2"><li class="lvl-4"><code>KEYS *</code>：会返回所有符合规则的 key。</li><li class="lvl-4"><code>HGETALL</code>：会返回一个 Hash 中所有的键值对</li><li class="lvl-4"><code>LRANGE</code>：会返回 List 中指定范围内的元素。</li><li class="lvl-4"><code>SMEMBERS</code>：返回 Set 中的所有元素。</li><li class="lvl-4"><code>SINTER</code>/<code>SUNION</code>/<code>SDIFF</code>：计算多个 Set 的交集/并集/差集</li></ul></li><li class="lvl-2"><p><strong>RDB创建</strong></p><p>Redis 提供了两个命令来生成 RDB 快照文件：</p><ul class="lvl-2"><li class="lvl-4"><p><code>save</code> : 同步保存操作，会阻塞 Redis 主线程；</p></li><li class="lvl-4"><p><code>bgsave</code> : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。</p></li></ul><p>默认情况下，Redis 默认配置会使用 <code>bgsave</code> 命令。如果手动使用 <code>save</code> 命令生成 RDB 快照文件的话，就会阻塞主线程。</p></li><li class="lvl-2"><p><strong>AOF</strong></p><ul class="lvl-2"><li class="lvl-4">日志记录阻塞：我们知道，AOF 是在当前命令执行完之后在进行记录的，这不会阻塞当前命令的执行，但可能阻塞后续命令的执行。</li><li class="lvl-4">AOF刷盘阻塞：当后台线程（ <code>aof_fsync</code> 线程）调用 <code>fsync</code> 函数同步 AOF 文件时，需要等待，直到写入完成。当磁盘压力太大的时候，会导致 <code>fsync</code> 操作发生阻塞，主线程调用 <code>write</code> 函数时也会被阻塞。<code>fsync</code> 完成后，主线程执行 <code>write</code> 才能成功返回。</li><li class="lvl-4">AOF重写阻塞：</li></ul></li><li class="lvl-2"><p><strong>BigKey</strong></p></li><li class="lvl-2"><p><strong>CPU竞争</strong></p></li><li class="lvl-2"><p>Redis 是典型的 <strong>CPU 密集型</strong>应用，不建议和其他多核 CPU 密集型服务部署在一起。当其他进程过度消耗 CPU 时，将严重影响 Redis 的吞吐量。</p><p>可以通过<code>redis-cli --stat</code>获取当前 Redis 使用情况。通过<code>top</code>命令获取进程对 CPU 的利用率等信息 通过<code>info commandstats</code>统计信息分析出命令不合理开销时间，查看是否是因为高算法复杂度或者过度的内存优化问题</p></li><li class="lvl-2"><p><strong>网络问题</strong></p></li><li class="lvl-2"><p><strong>Swap</strong></p></li></ul><h3 id="Redis内存碎片">Redis内存碎片</h3><p><strong>redis产生内存碎片的原因：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>Redis存储数据时向操作系统申请的内存空间大于实际上存储数据所需的空间</p><ul class="lvl-2"><li class="lvl-4"><p>Redis 使用 <code>zmalloc</code> 方法(Redis 自己实现的内存分配方法)进行内存分配的时候，除了要分配 <code>size</code> 大小的内存之外，还会多分配 <code>PREFIX_SIZE</code> 大小的内存。</p></li><li class="lvl-4"><p>另外，Redis 可以使用多种<strong>内存分配器</strong>来分配内存（ libc、jemalloc、tcmalloc），默认使用 <a href="https://github.com/jemalloc/jemalloc">jemalloc</a>，而 jemalloc 按照一系列固定的大小（8 字节、16 字节、32 字节……）来分配内存的。</p><p>当程序申请的内存最接近某个固定值时，jemalloc 会给它分配相应大小的空间，就比如说程序需要申请 17 字节的内存，jemalloc 会直接给它分配 32 字节的内存，这样会导致有 15 字节内存的浪费。不过，jemalloc 专门针对内存碎片问题做了优化，一般不会存在过度碎片化的问题。</p></li></ul></li><li class="lvl-2"><p><strong>频繁修改 Redis 中的数据也会产生内存碎片。</strong><br>当 Redis 中的某个数据删除时，Redis 通常不会轻易释放内存给操作系统。</p></li></ul><h2 id="Redis-Sentinel">Redis Sentinel</h2><p>主从模式：高并发</p><p>哨兵模式：高可用</p><p>集群模式：哨兵模式上进一步提高并发量</p><p>普通的<strong>主从复制方案</strong>下，一旦 master 宕机，我们需要从 slave 中手动选择一个新的 master，同时需要修改应用方的主节点地址，还需要命令所有从节点去复制新的主节点，整个过程需要人工干预。人工干预大大增加了问题的处理时间以及出错的可能性。</p><p>我们可以借助 Redis 官方的 Sentinel（哨兵）方案来帮助我们解决这个痛点，实现<strong>自动化地故障切换。</strong></p><h3 id="什么是-Sentinel">什么是 Sentinel</h3><p><strong>Sentinel（哨兵）</strong> 只是 Redis 的一种<strong>运行模式</strong> ，不提供读写服务，默认运行在 26379 端口上，</p><p>Redis 在 Sentinel 这种特殊的运行模式下，使用专门的命令表，也就是说普通模式运行下的 Redis 命令将无法使用。</p><p>Redis Sentinel 实现 Redis 集群高可用，只是在主从复制实现集群的基础下，多了一个 Sentinel 角色来帮助我们监控 Redis 节点的运行状态并自动实现故障转移。</p><h3 id="Sentinel-有什么用">Sentinel 有什么用</h3><ul class="lvl-0"><li class="lvl-2"><p>**监控：**监控所有 redis 节点（包括 sentinel 节点自身）的状态是否正常。</p></li><li class="lvl-2"><p>**故障转移：**如果一个 master 出现故障，Sentinel 会帮助我们实现故障转移，自动将某一台 slave 升级为 master，确保整个 Redis 系统的可用性。</p></li><li class="lvl-2"><p>**通知 ：**通知 slave 新的 master 连接信息，让它们执行 replicaof 成为新的 master 的 slave。</p></li><li class="lvl-2"><p>**配置提供 ：**客户端连接 sentinel 请求 master 的地址，如果发生故障转移，sentinel 会通知新的 master 链接信息给客户端。</p></li></ul><p>Redis Sentinel 本身设计的就是一个分布式系统，建议多个 sentinel 节点协作运行。这样做的好处是：</p><ul class="lvl-0"><li class="lvl-2"><p>多个 sentinel 节点通过投票的方式来确定 sentinel 节点是否真的不可用，避免误判（比如网络问题可能会导致误判）。</p></li><li class="lvl-2"><p>Sentinel 自身就是高可用。</p></li></ul><p><strong>如果想要实现高可用，建议将哨兵 Sentinel 配置成单数且大于等于 3 台。</strong></p><h3 id="Sentinel-如何检测节点下线">Sentinel 如何检测节点下线</h3><p>Redis Sentinel 中有两个下线（Down）的概念：</p><ul class="lvl-0"><li class="lvl-2"><p>**主观下线(SDOWN) ：**sentinel 节点认为某个 Redis 节点已经下线了（主观下线），但还不是很确定，需要其他 sentinel 节点的投票。</p></li><li class="lvl-2"><p>**客观下线(ODOWN) ：**法定数量（通常为过半）的 sentinel 节点认定某个 Redis 节点已经下线（客观下线），那它就算是真的下线了。</p></li></ul><p>也就是说，<strong>主观下线</strong> 当前的 sentinel 自己认为节点宕机，客观下线是 sentinel 整体达成一致认为节点宕机。</p><p><strong>每个 sentinel 节点以每秒钟一次的频率向整个集群中的 master、slave 以及其他 sentinel 节点发送一个 PING 命令。</strong></p><p>如果对应的节点超过规定的时间（down-after-millisenconds）没有进行有效回复的话，就会被其认定为是 <strong>主观下线(SDOWN)</strong></p><p>如果被认定为主观下线的是 slave 的话， sentinel 不会做什么事情，因为 slave 下线对 Redis 集群的影响不大，Redis 集群对外正常提供服务。但如果是 master 被认定为主观下线就不一样了，sentinel 整体还要对其进行进一步核实，确保 master 是真的下线了。</p><p>所有 sentinel 节点要以每秒一次的频率确认 master 的确下线了，当法定数量（通常为过半）的 sentinel 节点认定 master 已经下线， master 才被判定为 <strong>客观下线(ODOWN)</strong> 。这样做的目的是为了防止误判，毕竟故障转移的开销还是比较大的，这也是为什么 Redis 官方推荐部署多个 sentinel 节点（哨兵集群）。</p><h3 id="如何选出新Master">如何选出新Master</h3><p>slave 必须是在线状态才能参加新的 master 的选举，筛选出所有在线的 slave 之后，通过下面 3 个维度进行最后的筛选（优先级依次降低）：</p><ol><li class="lvl-3"><p>**slave 优先级 ：**可以通过 slave-priority 手动设置 slave 的优先级，优先级越高得分越高，优先级最高的直接成为新的 master。如果没有优先级最高的，再判断复制进度。</p></li><li class="lvl-3"><p>**复制进度 ：**Sentinel 总是希望选择出数据最完整（与旧 master 数据最接近）也就是复制进度最快的 slave 被提升为新的 master，复制进度越快得分也就越高。</p></li><li class="lvl-3"><p>**runid(运行 id) ：**通常经过前面两轮筛选已经成果选出来了新的 master，万一真有多个 slave 的优先级和复制进度一样的话，那就 runid 小的成为新的 master，每个 redis 节点启动时都有一个 40 字节随机字符串作为运行 id。</p></li></ol><h3 id="Sentinel-是否可以防止脑裂">Sentinel 是否可以防止脑裂</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>什么是脑裂？</strong><br>简单来说就是主库发生了<strong>假故障</strong>。如果当前<strong>主库</strong>突然出现暂时性 “失联”，而并不是真的发生了故障，此时监听的<strong>哨兵</strong>会自动启动<strong>主从切换</strong>机制。当这个原始的主库从假故障中<strong>恢复</strong>后，又开始处理请求，但是哨兵已经选出了新的主库，这样一来，<strong>旧的主库和新主库就会同时存在</strong>，这就是<strong>脑裂现象</strong>。</p></li><li class="lvl-2"><p><strong>脑裂有什么影响</strong>？产生脑裂后，原有的客户端还会在原来的 master 上继续写入数据，新的 master 无法同步这些数据到自身，新的数据也无法同步到老节点，造成Redis 数据的不一致。当网络分区解决后，sentinel 会将老 master 降级为 slave ，此时被降级为 slave 的节点要从 master 中同步数据，他原有的新增数据就会丢失。</p></li><li class="lvl-2"><p><strong>如何解决脑裂问题？</strong><br>Redis 中有两个关键的配置项可以解决这个问题，分别是 <strong>min-slaves-to-write（最小从服务器数）</strong> 和 <strong>min-slaves-max-lag（从连接的最大延迟时间）</strong>。</p><ul class="lvl-2"><li class="lvl-4"><strong><code>min-slaves-to-write</code></strong> 是指主库最少得有 N 个健康的从库存活才能执行写命令。这个配置虽然不能保证 N 个从库都一定能接收到主库的写操作，但是能避免当没有足够健康的从库时，主库拒绝写入，以此来避免数据的丢失 ，如果设置为 0 则表示关闭该功能。</li><li class="lvl-4"><strong><code>min-slaves-max-lag</code></strong> 这个配置项设置了主从库间进行数据复制时，从库给主库发送 ACK 消息的最大延迟。用于配置 master 多长时间（秒）无法得到从节点的响应，就认为这个节点失联。我们这里配置的是 10 秒，也就是说 master 10 秒都得不到一个从节点的响应，就会认为这个从节点失联，停止接受新的写入命令请求。</li></ul><p>配置了这两个参数后，如果发生脑裂，原先的master 节点就会拒绝写入操作，会在新的master 节点进行数据写入，从缺避免数据丢失。</p></li></ul><h2 id="Redis-Cluster">Redis Cluster</h2><ul class="lvl-0"><li class="lvl-2"><p>为什么需要 Redis Cluster？解决了什么问题？有什么优势？</p></li><li class="lvl-2"><p>Redis Cluster 是如何分片的？</p></li><li class="lvl-2"><p>为什么 Redis Cluster 的哈希槽是 16384 个?</p></li><li class="lvl-2"><p>如何确定给定 key 的应该分布到哪个哈希槽中？</p></li><li class="lvl-2"><p>Redis Cluster 支持重新分配哈希槽吗？</p></li><li class="lvl-2"><p>Redis Cluster 扩容缩容期间可以提供服务吗？</p></li><li class="lvl-2"><p>Redis Cluster 中的节点是怎么进行通信的？</p></li></ul><p>Redis Cluster 主要是为了提高<strong>写并发。</strong></p><p>为了保证高可用，Redis Cluster 至少需要 3 个 master 以及 3 个 slave，也就是说每个 master 必须有 1 个 slave。master 和 slave 之间做主从复制，slave 会实时同步 master 上的数据。</p><p>不同于普通的 Redis 主从架构，这里的 slave 不对外提供读服务，主要用来保障 master 的高可用，当 master 出现故障的时候替代它。</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240528164002270.png" alt="image-20240528164002270" style="zoom:50%;"><p>Redis Cluster 是<strong>去中心化</strong>的（各个节点基于 Gossip 进行通信），任何一个 master 出现故障，其它的 master 节点不受影响，因为 key 找的是哈希槽而不是 Redis 节点。不过，Redis Cluster 至少要保证宕机的 master 有一个 slave 可用。</p><p><strong>如果宕机的 master 无 slave 的话</strong>，为了保障集群的完整性，保证所有的哈希槽都指派给了可用的 master ，<strong>整个集群将不可用</strong>。这种情况下，还是想让集群保持可用的话，可以将<code>cluster-require-full-coverage </code>这个参数设置成 no，cluster-require-full-coverage 表示需要 <strong>16384</strong> 个 slot 都正常被分配的时候 Redis Cluster 才可以对外提供服务。</p><p>有了 Redis Cluster 之后，不需要专门部署 Sentinel 集群服务了。Redis Cluster 相当于是内置了 Sentinel 机制，Redis Cluster 内部的各个 Redis 节点通过 Gossip 协议互相探测健康状态，在故障时可以自动切换。</p><h3 id="Redis-Cluster-如何分片">Redis Cluster 如何分片</h3><p>Redis Cluster 并没有使用<strong>一致性哈希</strong>，采用的是 <strong>哈希槽分区</strong> ，每一个键值对都属于一个 hash slot（哈希槽） 。</p><p>Redis Cluster 通常有 <strong>16384</strong> 个哈希槽 ，要计算给定 key 应该分布到哪个哈希槽中，我们只需要先对每个 key 计算 CRC-16（XMODEM） 校验码，然后再对这个校验码对 16384(哈希槽的总数) 取模，得到的值即是 key 对应的哈希槽。</p><p>创建并初始化 Redis Cluster 的时候，Redis 会<strong>自动平均分配</strong>这 16384 个哈希槽到各个节点，不需要我们手动分配。如果你想自己手动调整的话，Redis Cluster 也内置了相关的命令比如<code> ADDSLOTS、ADDSLOTSRANGE</code></p><p>客户端连接 Redis Cluster 中任意一个 master 节点即可访问 Redis Cluster 的数据，当客户端发送命令请求的时候，需要先根据 key 通过上面的计算公示找到的对应的哈希槽，然后再查询哈希槽和节点的映射关系，即可找到目标节点。</p><img src="/2024/06/09/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240528165246469.png" alt="image-20240528165246469" style="zoom:50%;"><p>如果哈希槽确实是当前节点负责，那就直接响应客户端的请求返回结果，如果不由当前节点负责，就会返回 -MOVED 重定向错误，告知客户端当前哈希槽是由哪个节点负责，客户端向目标节点发送请求并更新缓存的哈希槽分配信息。</p><p>Redis Cluster 哈希槽分区机制的优点：<strong>解耦了数据和节点之间的关系，提升了集群的横向扩展性和容错性。</strong></p><h3 id="Redis-Cluster-扩容缩容期间可以提供服务吗？"><strong>Redis Cluster 扩容缩容期间可以提供服务吗？</strong></h3><p>为了保证 Redis Cluster 在扩容和缩容期间依然能够对外正常提供服务，Redis Cluster 提供了重定向机制，两种不同的类型：</p><ul class="lvl-0"><li class="lvl-2"><p>ASK 重定向</p></li><li class="lvl-2"><p>MOVED 重定向</p></li></ul><p>从客户端的角度来看，ASK 重定向是下面这样的：</p><ol><li class="lvl-3"><p>客户端发送请求命令，如果请求的 key 对应的哈希槽还在当前节点的话，就直接响应客户端的请求。</p></li><li class="lvl-3"><p>如果客户端请求的 key 对应的哈希槽当前正在迁移至新的节点，就会返回 -ASK 重定向错误，告知客户端要将请求发送到哈希槽被迁移到的目标节点。</p></li><li class="lvl-3"><p>客户端收到 -ASK 重定向错误后，将会临时（一次性）重定向，自动向目标节点发送一条 <a href="https://redis.io/commands/asking/">ASKING</a> 命令。也就是说，接收到 ASKING 命令的节点会强制执行一次请求，下次再来需要重新提前发送 ASKING 命令。</p></li><li class="lvl-3"><p>客户端发送真正的请求命令。</p></li><li class="lvl-3"><p>ASK 重定向并不会同步更新客户端缓存的哈希槽分配信息，也就是说，客户端对正在迁移的相同哈希槽的请求依然会发送到原节点而不是目标节点。</p></li></ol><p>如果客户端请求的 key 对应的哈希槽应该迁移完成的话，就会返回 -MOVED 重定向错误，告知客户端当前哈希槽是由哪个节点负责，客户端向目标节点发送请求并更新缓存的哈希槽分配信息。</p><h2 id="Redis实现延时任务">Redis实现延时任务</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>过期事件监听</strong><br>在 pub/sub 模式下，生产者需要指定消息发送到哪个 channel 中，而消费者则订阅对应的 channel 以获取消息。</p><p>Redis 中有很多默认的 channel，这些 channel 是由 Redis 本身向它们发送消息的，而不是我们自己编写的代码。其中，<code>__keyevent@0__:expired</code> 就是一个默认的 channel，负责<strong>监听 key 的过期事件</strong>。也就是说，当一个 key 过期之后，Redis 会发布一个 key 过期的事件到<code>__keyevent@&lt;db&gt;__:expired</code>这个 channel 中。我们只需要监听这个 channel，就可以拿到过期的 key 的消息，进而实现了延时任务功能。这个功能被 Redis 官方称为 <strong>keyspace notifications</strong> ，作用是实时监控实时监控 Redis 键和值的变化。</p><p><strong>Redis过期事件监听的缺点：</strong></p><ul class="lvl-2"><li class="lvl-4"><p><strong>时效性差</strong>：过期事件是在Redis删除key时发布的，但 key 并不是一过期就直接删除的。</p></li><li class="lvl-4"><p><strong>丢消息</strong>：pub/sub不支持持久化，并且没有订阅者时，消息会直接丢弃，不会存储在channel中</p></li><li class="lvl-4"><p><strong>多服务实例下消息重复消费</strong>：Redis 的 pub/sub 模式目前只有广播模式，这意味着当生产者向特定频道发布一条消息时，所有订阅相关频道的消费者都能够收到该消息。这个时候，我们需要注意多个服务实例重复处理消息的问题，这会增加代码开发量和维护难度。</p></li></ul></li><li class="lvl-2"><p><strong>延迟队列</strong></p><p>Redisson 使用 <code>zrangebyscore</code> 命令扫描 SortedSet 中过期的元素，然后将这些过期元素从 SortedSet 中移除，并将它们加入到就绪消息列表中。就绪消息列表是一个阻塞队列，有消息进入就会被监听到。这样做可以避免对整个 SortedSet 进行轮询，提高了执行效率。</p><p>相对于过期事件监听，延迟队列有以下优势：</p><ul class="lvl-2"><li class="lvl-4"><p><strong>减少了丢消息的可能</strong>：因为<code>DelayedQueue</code>中的消息会被持久化</p></li><li class="lvl-4"><p><strong>消息不存在重复消费</strong>：每个客户端都是从同一个目标队列获取任务的，不存在重复消费问题。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> KV数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>halo安装部署</title>
      <link href="/2024/06/09/halo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/06/09/halo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1>安装Docker</h1><p><strong>使用终端命令安装Docker</strong></p><p><strong>更新yum</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><p><strong>卸载旧版本：</strong></p><p>列出安装过的 Docker 包：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list installed | grep docker</span><br></pre></td></tr></table></figure><p>旧版名称是 Docker，最新社区版 docker-engine， 目前已改名为docker-ce</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure><p><strong>设置yum源：</strong></p><p>本文以 yum 安装为例子进行安装安装 yum-utils，使用 yum-config-manager 工具设置 yum 源，后面两个是 devicemapper 驱动依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>使用阿里源访问</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><strong>安装Docker</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><p>安装成功</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2Fhalo2%E5%AE%89%E8%A3%85.assets%2Fimage-20240607150152740.png" alt="image-20240607150152740"></p><p><strong>启动Docker,并加入开启自启</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker     启动  </span><br><span class="line">systemctl restart docker   重启</span><br><span class="line">systemctl enable docker    开机启动</span><br></pre></td></tr></table></figure><p>执行 docker version 查看 Docker 版本号。</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2Fhalo2%E5%AE%89%E8%A3%85.assets%2Fimage-20240607150203715.png" alt="image-20240607150203715"></p><p>并且最新的docker 已经集成了 docker compose</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2Fhalo2%E5%AE%89%E8%A3%85.assets%2Fimage-20240607150210993.png" alt="image-20240607150210993"></p><h1>安装halo</h1><h2 id="创建-halo-目录"><strong>创建 halo 目录</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/halo &amp;&amp; cd ~/halo</span><br></pre></td></tr></table></figure><h2 id="创建-docker-compose-yaml"><strong>创建 <code>docker-compose.yaml</code></strong></h2><p>此处我们使用 mysql 作为数据库</p><p>docker-compose.yaml 的内容如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  halo:</span><br><span class="line">    image: halohub/halo:2.16</span><br><span class="line">    restart: on-failure:3</span><br><span class="line">    depends_on:</span><br><span class="line">      halodb:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    networks:</span><br><span class="line">      halo_network:</span><br><span class="line">    volumes:</span><br><span class="line">      - ./halo2:/root/.halo2</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8090:8090&quot;</span><br><span class="line">    healthcheck:</span><br><span class="line">      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8090/actuator/health/readiness&quot;]</span><br><span class="line">      interval: 30s</span><br><span class="line">      timeout: 5s</span><br><span class="line">      retries: 5</span><br><span class="line">      start_period: 30s</span><br><span class="line">    command:</span><br><span class="line">      - --spring.r2dbc.url=r2dbc:pool:mysql://halodb:3306/halo</span><br><span class="line">      - --spring.r2dbc.username=root</span><br><span class="line">      # MySQL 的密码，请保证与下方 MYSQL_ROOT_PASSWORD 的变量值一致。</span><br><span class="line">      - --spring.r2dbc.password=o#DwN&amp;JSa56</span><br><span class="line">      - --spring.sql.init.platform=mysql</span><br><span class="line">      # 外部访问地址，请根据实际需要修改</span><br><span class="line">      - --halo.external-url=http://localhost:8090/</span><br><span class="line"></span><br><span class="line">  halodb:</span><br><span class="line">    image: mysql:8.1.0</span><br><span class="line">    restart: on-failure:3</span><br><span class="line">    networks:</span><br><span class="line">      halo_network:</span><br><span class="line">    command: </span><br><span class="line">      - --default-authentication-plugin=caching_sha2_password</span><br><span class="line">      - --character-set-server=utf8mb4</span><br><span class="line">      - --collation-server=utf8mb4_general_ci</span><br><span class="line">      - --explicit_defaults_for_timestamp=true</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql:/var/lib/mysql</span><br><span class="line">      - ./mysqlBackup:/data/mysqlBackup</span><br><span class="line">    healthcheck:</span><br><span class="line">      test: [&quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;127.0.0.1&quot;, &quot;--silent&quot;]</span><br><span class="line">      interval: 3s</span><br><span class="line">      retries: 5</span><br><span class="line">      start_period: 30s</span><br><span class="line">    environment:</span><br><span class="line">      # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_R2DBC_PASSWORD 变量值</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=o#DwN&amp;JSa56</span><br><span class="line">      - MYSQL_DATABASE=halo</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  halo_network:</span><br></pre></td></tr></table></figure><h2 id="启动-Halo">启动 Halo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose up -d  </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose logs -f</span><br></pre></td></tr></table></figure><p>用浏览器访问 /console 即可进入 Halo 管理页面，首次启动会进入初始化页面。</p><p>后续如果需要修改 halo 的配置，直接更新 docker-compose.yaml 后重新启动容器即可</p><p><strong>如果遇到DockerHub被DNS污染的情况，会拉取不到镜像，那就取ghcr.io上拉取halo的镜像</strong></p><h1>nginx 反向代理</h1><h2 id="安装nginx">安装nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install nginx         #安装</span><br><span class="line">sudo systemctl start nginx     #启动</span><br><span class="line">sudo systemctl enable nginx    #开机自启</span><br></pre></td></tr></table></figure><h2 id="配置反向代理">配置反向代理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream halo &#123;</span><br><span class="line">  server 127.0.0.1:8090;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen [::]:80;</span><br><span class="line">  server_name www.yourdomain.com;</span><br><span class="line">  client_max_body_size 1024m;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://halo;</span><br><span class="line">    proxy_set_header HOST $host;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，halo2是用java写的，相比于带后端的其他博客系统，比如typecho，wordpress来说，还是比较吃内存的，一个mysql容器，一个halo容器，一个nginx，占用了1G多内存，没办法，java应用是这样的</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2Fhalo2%E5%AE%89%E8%A3%85.assets%2Fimage-20240607150434494.png" alt="image-20240607150434494"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC知识点</title>
      <link href="/2024/06/08/JUC%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2024/06/08/JUC%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309202706043.png" alt="image-20240309202706043" style="zoom: 67%;"><p><strong>在JAVA中，当我们启动main函数时，实际上会启动一个<mark>JVM进程</mark>，main函数所在的线程就是这个进程的<mark>主线程</mark>。</strong></p><p><strong>并发编程的<mark>三个重要特性</mark>：原子性、可见性、有序性</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>原子性</strong>：使用<code>sychronized</code>、各种<code>lock</code>保证原子性</p></li><li class="lvl-2"><p><strong>可见性</strong>：当一个线程对<code>共享变量</code>修改后，另外的线程都是可以立即看到修改后的最新值。使用<code>sychronized</code>、<code>volatile</code>、<code>lock</code>实现可见性。</p></li><li class="lvl-2"><p><strong>有序性</strong>：指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致，所以在多线程下，指令重排序可能会导致一些问题，我们可以使用<code>volatile</code>关键字来禁止指令重排序。</p></li></ul><h2 id="多线程">多线程</h2><h3 id="进程和线程的区别">进程和线程的区别</h3><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309204137587.png" alt="image-20240309204137587"></p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309204253422.png" alt="image-20240309204253422" style="zoom: 50%;"><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309204402331.png" alt="image-20240309204402331"></p><h3 id="并发和并行">并发和并行</h3><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309204819989.png" alt="image-20240309204819989"></p><h3 id="创建线程的方式">创建线程的方式</h3><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309205219858.png" alt="image-20240309205219858" style="zoom:50%;"><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309205830743.png" alt="image-20240309205830743" style="zoom: 50%;"><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309205943877.png" alt="image-20240309205943877" style="zoom: 50%;"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//匿名内部类，在Thread()中传入实现了Rannable接口的实例</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309210310343.png" alt="image-20240309210310343" style="zoom: 50%;"><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309210624669.png" alt="image-20240309210624669" style="zoom: 50%;"><h4 id="Runnable和Callable有什么区别">Runnable和Callable有什么区别</h4><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309210918913.png" alt="image-20240309210918913"></p><h4 id="run-和-start-的区别">run() 和 start()的区别</h4><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309211337601.png" alt="image-20240309211337601"></p><h3 id="线程的状态及转化">线程的状态及转化</h3><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309211842592.png" alt="image-20240309211842592" style="zoom: 67%;"><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309212837104.png" alt="image-20240309212837104"></p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309212920842.png" alt="image-20240309212920842"></p><h3 id="如何控制线程的运行顺序-join">如何控制线程的运行顺序 join()</h3><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309213722393.png" alt="image-20240309213722393"></p><h3 id="notify-和notifyall">notify()和notifyall()</h3><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240309214010249.png" alt="image-20240309214010249" style="zoom:50%;"><h3 id="sleep-和wait-⭐">sleep()和wait() ⭐</h3><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310140600006.png" alt="image-20240310140600006" style="zoom:67%;"><h3 id="停止线程">停止线程</h3><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310142855985.png" alt="image-20240310142855985" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用标志退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterrupt1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span> ;     <span class="comment">// 线程执行的退出标记</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread...run...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建MyThread对象</span></span><br><span class="line">        <span class="type">MyInterrupt1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterrupt1</span>() ;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程休眠6秒</span></span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更改标记为true</span></span><br><span class="line">        t1.flag = <span class="literal">true</span> ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用interrupt方法中断线程</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterrupt3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.打断阻塞的线程</span></span><br><span class="line">        <span class="comment">/*Thread t1 = new Thread(()-&gt;&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;t1 正在运行...&quot;);</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                Thread.sleep(5000);</span></span><br><span class="line"><span class="comment">            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;, &quot;t1&quot;);</span></span><br><span class="line"><span class="comment">        t1.start();</span></span><br><span class="line"><span class="comment">        Thread.sleep(500);</span></span><br><span class="line"><span class="comment">        t1.interrupt();</span></span><br><span class="line"><span class="comment">        System.out.println(t1.isInterrupted());*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.打断正常的线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> current.isInterrupted();</span><br><span class="line">                <span class="keyword">if</span>(interrupted) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;打断状态：&quot;</span>+interrupted);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//        t2.interrupt();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized底层原理">synchronized底层原理</h2><h3 id="基本使用">基本使用</h3><p><strong>注意：sychronized只能满足单个jvm下的锁，多个jvm下需要分布式锁，如同一个服务，但是做了集群，他们就位于不同的jvm中</strong></p><p>Synchronized【对象锁】采用互斥的方式让同一时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310143751088.png" alt="image-20240310143751088"></p><p><mark><strong>使用方式</strong>：</mark></p><ul class="lvl-0"><li class="lvl-2"><p><strong>修饰实例方法（锁当前对象实例）</strong><br>给当前对象实例加锁，进入同步代码前要先获得当前对象的实例锁</p></li><li class="lvl-2"><p><strong>修饰静态方法（锁当前类）</strong><br>给当前类加锁，会作用于类的所有实例对象，进入同步代码前要先获得当前class的锁，因为静态成员变量不属于任何一个实例，而是属于整个类，被类的所用实例共享。</p><p>静态 <code>synchronized</code> 方法和非静态 <code>synchronized</code> 方法之间的调用互斥么？不互斥！如果一个线程 A 调用一个实例对象的非静态 <code>synchronized</code> 方法，而线程 B 需要调用这个实例对象所属类的静态 <code>synchronized</code> 方法，是允许的，不会发生互斥现象，因为访问静态 <code>synchronized</code> 方法占用的锁是当前类的锁，而访问非静态 <code>synchronized</code> 方法占用的锁是当前实例对象锁。</p></li><li class="lvl-2"><p><strong>修饰代码块（锁指定对象/类）</strong><br>对括号里的 类/对象 加锁</p><p><code>synchronized(object)</code> 表示进入同步代码库前要获得 <strong>给定对象的锁</strong>。</p><p><code>synchronized(类.class)</code> 表示进入同步代码前要获得 <strong>给定 Class 的锁</strong></p></li><li class="lvl-2"><p><strong>构造方法能用 <code>synchronized</code> 修饰吗？</strong><br>不能，但构造方法内可以使用 <code>synchronized</code> 代码块另外，构造方法本身是线程安全的，但如果在构造方法中涉及到共享资源的操作，就需要采取适当的同步措施来保证整个构造过程的线程安全</p></li></ul><h3 id="底层原理">底层原理</h3><p>synchronized 关键字底层原理属于 JVM 层面的东西。</p><p>Monitor 被翻译为监视器，由jvm提供，c++语言实现</p><h4 id="修饰同步代码块的情况">修饰同步代码块的情况</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;synchronized 代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为上述代码字节码文件的一部分，可以看到，<strong>包含两个monitorexit</strong>，这是为了保证同步代码块正常执行以及出现异常时，同步锁可以正常释放。</p><p>当执行monitorenter指令时，<strong>线程</strong>会试图获取锁，也就是获取<strong>对象监视器</strong><code>monitor</code>的特有权。</p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240503193419346-1716727704727-17.png" alt="image-20240503193419346" style="zoom: 67%;"><p>在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由<code>ObjectMonitor</code>实现的。<strong>每个对象中都内置了一个 <code>ObjectMonitor</code>对象。</strong></p><p>另外，<code>wait/notify</code>等方法也依赖于<code>monitor</code>对象，这就是为什么<strong>只有在同步的块或者方法中才能调用<code>wait/notify</code>等方法，否则</strong>会抛出<code>java.lang.IllegalMonitorStateException</code>的异常的原因。</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310144605392.png" alt="image-20240310144605392"></p><p>具体的流程：</p><ul class="lvl-0"><li class="lvl-2"><p>代码进入synchorized代码块，<mark>先让lock（对象锁）关联monitor</mark>，然后判断Owner是否有线程持有</p></li><li class="lvl-2"><p>如果没有线程持有，则让当前线程持有，表示该线程获取锁成功</p></li><li class="lvl-2"><p>如果有线程持有，则让当前线程进入entryList进行阻塞，如果Owner持有的线程已经释放了锁，在EntryList中的线程去<mark>竞争</mark>锁的持有权==（非公平）==</p></li><li class="lvl-2"><p>如果代码块中调用了wait()方法，则会进去WaitSet中进行等待</p></li></ul><p>参考回答：</p><ul class="lvl-0"><li class="lvl-2"><p>Synchronized【对象锁】采用互斥的方式让同一时刻至多只有一个线程能持有【对象锁】</p></li><li class="lvl-2"><p>它的底层由monitor实现的，<strong>monitor是jvm级别的对象（ C++实现）</strong>，线程获得锁需要使用对象（锁）关联monitor</p></li><li class="lvl-2"><p>在monitor内部有三个属性，分别是owner、entrylist、waitset</p></li><li class="lvl-2"><p>其中owner是关联的获得锁的线程，并且只能关联一个线程；entrylist关联的是处于阻塞状态的线程；waitset关联的是处于Waiting状态的线程</p></li></ul><h4 id="修饰方法的情况">修饰方法的情况</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;synchronized 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240606183136051.png" alt="image-20240606183136051" style="zoom:50%;"><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。JVM 通过该 <code>ACC_SYNCHRONIZED</code> 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。</p><p><strong>如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁</strong></p><p><strong>总结</strong></p><ul class="lvl-0"><li class="lvl-2"><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p></li><li class="lvl-2"><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。</p></li></ul><h3 id="锁升级">锁升级</h3><p>首先，锁的状态有4中：<strong>无锁状态</strong>、<strong>偏向锁</strong>、<strong>轻量级锁</strong>、<strong>重量级锁</strong>。这些都记录在锁对象的<strong>Mark Word</strong>中。随着锁竞争的激烈程度上升，锁会升级，但不会降级。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>偏向锁</strong><br>偏向于第一个请求锁的线程。</p><ul class="lvl-2"><li class="lvl-4">如果在运行过程中，同步锁只有一个线程请求，不存在锁竞争的情况，则会给该线程加一个偏向锁（将线程id记录在锁对象mark word中），当该线程下次执行同步代码块时，会判断当前持有锁的线程是否是自己。如果自始至终都没有锁竞争，那么偏向锁不会有额外的开销，效率很高。</li><li class="lvl-4">如果运行过程中发生了锁竞争，则持有偏向锁的线程会被挂起，JVM会消除他的偏向锁，将锁升级为轻量级锁，撤销轻量级锁时会导致STW。</li></ul></li><li class="lvl-2"><p><strong>轻量级锁（自旋锁）</strong></p><ul class="lvl-2"><li class="lvl-4">升级为轻量级锁后，竞争失败的线程会导致锁进入<strong>锁膨胀</strong>状态，会让竞争失败的线程自旋，自旋会导致<strong>忙等</strong>问题，当自旋达到一定次数后，轻量级锁升级为重量级锁。</li><li class="lvl-4">自旋的好处是，减少了线程状态切换带来的开销，缺点是可能会占用CPU资源。</li></ul></li><li class="lvl-2"><p><strong>重量级锁</strong></p><ul class="lvl-2"><li class="lvl-4">当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则自己会直接进入阻塞状态。</li></ul></li></ul><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240606185236557.png" alt="image-20240606185236557" style="zoom:50%;"><h2 id="volatile">volatile</h2><h3 id="保证线程间的可见性">保证线程间的可见性</h3><p>如果我们将变量声明为 <code>volatile</code> ，这就指示 JVM，这个变量是共享且不稳定的，<mark>每次使用它都到<strong>主存中进行读取</strong></mark></p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310154147808.png" alt="image-20240310154147808"></p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310154540702.png" alt="image-20240310154540702" style="zoom:67%;"><p>其实是加了<code>volatile</code>后，每次读写这个变量，都要到共享内存中读取</p><h3 id="禁止指令重排序">禁止指令重排序</h3><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310154929359.png" alt="image-20240310154929359"></p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310155651807.png" alt="image-20240310155651807"></p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310155852881.png" alt="image-20240310155852881" style="zoom:67%;"><h4 id="双重校验锁-实现对象单例（线程安全）："><strong>双重校验锁 实现对象单例（线程安全）</strong>：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"><span class="comment">//私有化构造函数，不能 new 对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Singleton <span class="title function_">getUniqueInstance</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span></span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uniqueInstance</code> 采用 <code>volatile</code> 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li class="lvl-3"><p>为 <code>uniqueInstance</code> 分配内存空间</p></li><li class="lvl-3"><p>初始化 <code>uniqueInstance</code></p></li><li class="lvl-3"><p>将 <code>uniqueInstance</code> 指向分配的内存地址</p></li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 <code>getUniqueInstance</code>() 后发现 <code>uniqueInstance</code> 不为空，因此返回 <code>uniqueInstance</code>，但此时 <code>uniqueInstance</code> 还未被初始化。</p><p>**<code>volatile</code> 关键字能保证变量的可见性，但<mark>不能保证对变量的操作是原子性的</mark>。**通常，对一个变量的修改包括三部：读取变量值，修改变量值，将修改后的值保存</p><h3 id="synchronized和volatile">synchronized和volatile</h3><p><code>synchronized</code> 关键字和 <code>volatile</code> 关键字是两个互补的存在，而不是对立的存在！</p><ul class="lvl-0"><li class="lvl-2"><p><code>volatile</code> 关键字是线程同步的轻量级实现，所以 <code>volatile</code>性能肯定比<code>synchronized</code>关键字要好 。但是 <code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块 。</p></li><li class="lvl-2"><p><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</p></li><li class="lvl-2"><p><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性，和防止指令重排，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性</p></li></ul><h2 id="JMM-Java内存模型">JMM(Java内存模型)</h2><p><strong>JMM 定义了共享内存中多线程程序读写操作的行为规范。</strong></p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310151130003.png" alt="image-20240310151130003" style="zoom:67%;"><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310151147324.png" alt="image-20240310151147324" style="zoom:67%;"><p><strong>什么是主内存？什么是本地内存？</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>主内存</strong>：所有线程创建的实例对象都存放在主内存中，不管该实例对象是成员变量，还是局部变量，类信息、常量、静态变量都是放在主内存中。为了获取更好的运行速度，虚拟机及硬件系统可能会让工作内存优先存储于寄存器和高速缓存中。</p></li><li class="lvl-2"><p><strong>本地内存</strong>：每个线程都有一个私有的本地内存，本地内存存储了该线程以读 / 写==<strong>共享变量的副本</strong>==。**每个线程只能操作自己本地内存中的变量，无法直接访问其他线程的本地内存。如果线程间需要通信，必须通过主内存来进行。**本地内存是 JMM 抽象出来的一个概念，并不真实存在，它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。</p></li></ul><p>JMM为共享变量提供了可见性的保障。</p><p>主内存存放共享变量，工作内存存放共享变量副本。</p><h2 id="锁">锁</h2><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310153143150.png" alt="image-20240310153143150"></p><h3 id="悲观锁">悲观锁</h3><ul class="lvl-0"><li class="lvl-2"><p>悲观锁的基本思想是认为数据很可能会发生冲突，因此在访问数据之前先获取锁。在使用悲观锁的情况下，线程在访问共享资源之前会先尝试获取锁，如果获取不到锁就会进入阻塞状态，直到获取到锁为止。</p></li><li class="lvl-2"><p>悲观锁常常使用 synchronized 关键字或者是显式锁（如 ReentrantLock）来实现，它可以确保在同一时刻只有一个线程能够访问共享资源，从而保证数据的一致性。</p></li></ul><h4 id="AQS（公平的）">AQS（公平的）</h4><p>AbstractQueueSynchronizer ,抽象队列同步器，是构建锁或其他同步组件的基础框架</p><p><mark><strong>AQS 就是一个抽象类，主要用来构建锁和同步器。</strong></mark></p><p>常见的实现类：ReentrantLock、Semaphore、CountDownLatch</p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240606203510042.png" alt="image-20240606203510042" style="zoom:50%;"><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310162708708.png" alt="image-20240310162708708" style="zoom: 67%;"><h4 id="ReentrantLock">ReentrantLock</h4><p>基于JDK实现的锁，与<code>synchronized</code>相比具有以下特点：</p><ul class="lvl-0"><li class="lvl-2"><p>可中断</p></li><li class="lvl-2"><p>可重入（synchronized也可重入）</p></li><li class="lvl-2"><p>可设置公平锁</p></li><li class="lvl-2"><p>可设置超时时间</p></li><li class="lvl-2"><p>支持多个条件变量</p></li></ul><p><strong>可中断锁</strong>：获取锁的过程中可以被中断，不需要一直等到获取锁之后才能进行其他逻辑处理。<code>ReentrantLock</code> 就属于是可中断锁。</p><p>通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</p><p><strong>不可中断锁</strong>：一旦线程申请了锁，就只能等到拿到锁以后才能进行其他的逻辑处理。 <code>synchronized</code> 就属于是不可中断锁。</p><p><strong>可重入锁</strong> 也叫递归锁，指的是<strong>同一个线程</strong>可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果是不可重入锁的话，就会造成死锁。</p><h5 id="底层原理-2">底层原理</h5><p>AQS+CAS</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310164627977.png" alt="image-20240310164627977"></p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310165253810.png" alt="image-20240310165253810"></p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310165419183.png" alt="image-20240310165419183"></p><h5 id="synchronized-与-Lock的区别">synchronized 与 Lock的区别</h5><p><strong>语法层面</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><code>synchronized</code> 是关键字，由 jvm 实现，用cpp实现</p></li><li class="lvl-2"><p><code>Lock</code> 是接口，由 JDK 提供，用 java 语言实现</p></li><li class="lvl-2"><p><code>synchornized</code> 退出同步块会自动释放锁，<code>Lock</code> 要手动 unlock</p></li></ul><p><strong>功能层面</strong></p><ul class="lvl-0"><li class="lvl-2"><p>都是悲观锁，具有基本的<strong>互斥、同步、重入</strong>功能</p></li><li class="lvl-2"><p><code>Lock</code> 可打断、可公平、可设置超时时间、多条件变量</p></li><li class="lvl-2"><p><code>Lock</code> 由适合不同场景的实现，如 ReentrantLock、ReentrantReadWriteLock</p></li></ul><p><strong>性能层面：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>没有竞争时，<code>synchronized</code> 做了很多优化，如偏向锁、轻量级锁，性能不错</p></li><li class="lvl-2"><p>竞争激烈时，Lock 性能更好</p></li></ul><h4 id="Semaphore">Semaphore</h4><p><code>synchronized</code> 和 <code>ReentrantLock</code> 都是一次只允许一个线程访问某个资源，而<code>Semaphore</code>(信号量)可以用来控制同时访问特定资源的线程数量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始共享资源数量</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 获取1个许可</span></span><br><span class="line">semaphore.acquire();</span><br><span class="line"><span class="comment">// 释放1个许可</span></span><br><span class="line">semaphore.release();</span><br></pre></td></tr></table></figure><p><code>Semaphore</code> 通常用于那些<strong>资源有明确访问数量限制的场景</strong>比如限流（仅限于单机模式，实际项目中推荐使用 Redis +Lua 来做限流）。</p><h5 id="原理">原理</h5><p><code>Semaphore</code> 是共享锁的一种实现，它默认构造 AQS 的 <code>state</code> 值为 <code>permits</code>，你可以将 <code>permits</code> 的值理解为许可证的数量，只有拿到许可证的线程才能执行。</p><p>调用<code>semaphore.acquire()</code> ，线程尝试获取许可证，如果 <code>state &gt;= 0</code> 的话，则表示可以获取成功。如果获取成功的话，使用 <strong>CAS</strong> 操作去修改 <code>state</code> 的值 <code>state=state-1</code>。如果 <code>state&lt;0</code> 的话，则表示许可证数量不足。此时会创建一个 Node 节点加入阻塞队列，挂起当前线程。</p><h4 id="死锁">死锁</h4><p>死锁的四个必要条件</p><ul class="lvl-0"><li class="lvl-2"><p><strong>互斥条件</strong> ：该资源任意一个时刻只由一个线程占用。</p></li><li class="lvl-2"><p><strong>请求与保持条件</strong> ：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</p></li><li class="lvl-2"><p>**不剥夺条件 **: 线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</p></li><li class="lvl-2"><p>**循环等待条件 **: 若干线程之间形成一种头尾相接的循环等待资源关系。</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">resource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//资源 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">resource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//资源 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 1&quot;</span>).start();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="诊断死锁">诊断死锁</h4><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310185626352.png" alt="image-20240310185626352" style="zoom:67%;"><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310185932837.png" alt="image-20240310185932837" style="zoom:67%;"><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310185656573.png" alt="image-20240310185656573" style="zoom:67%;"><h3 id="乐观锁">乐观锁</h3><ul class="lvl-0"><li class="lvl-2"><p>乐观锁的基本思想是认为数据在一般情况下不会发生冲突，因此在访问数据时不加锁，而是在更新数据时检查是否发生了冲突。如果发现冲突，会进行相应的处理（通常是回滚操作），然后重新尝试。</p></li><li class="lvl-2"><p>乐观锁的典型实现是<strong>版本号机制</strong>、<strong>CAS算法</strong><mark>（是一个原子操作）</mark>。</p><ul class="lvl-2"><li class="lvl-4">在 Java 中<code>java.util.concurrent.atomic</code>包下面的原子变量类（比如<code>AtomicInteger</code>、<code>LongAdder</code>）就是使用了乐观锁的一种实现方式 <strong>CAS</strong> 实现的。</li></ul></li></ul><h4 id="悲观锁乐观锁如何选择">悲观锁乐观锁如何选择</h4><p>悲观锁适用于并发写入较多的场景，能够确保数据的一致性；而乐观锁适用于并发读取较多、写入较少的场景，可以提高系统的并发性能。</p><p>高并发的场景下，乐观锁相比悲观锁来说，不存在锁竞争造成线程阻塞，也不会有死锁的问题，在性能上往往会更胜一筹。但是，如果冲突频繁发生（写占比非常多的情况），会频繁失败和重试（<strong>黑马点评，超卖问题的解决</strong>），这样同样会非常影响性能，导致 CPU 飙升。</p><p><strong>悲观锁</strong>通常多用于<strong>写比较多</strong>的情况（<strong>多写场景</strong>，竞争激烈），这样可以<strong>避免频繁失败和重试</strong>影响性能，悲观锁的开销是固定的。不过，如果乐观锁解决了频繁失败和重试这个问题的话（比如<code>LongAdder</code>），也是可以考虑使用乐观锁的，要视实际情况而定。</p><p><strong>乐观锁</strong>通常多用于<strong>写比较少</strong>的情况（多读场景，竞争较少），这样可以<strong>避免频繁加锁</strong>影响性能。不过，乐观锁主要针对的对象是单个共享变量（参考<code>java.util.concurrent.atomic</code>包下面的原子变量类）</p><h4 id="CAS（Compare-And-Swap">CAS（Compare And Swap)</h4><p>​</p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310152254760.png" alt="image-20240310152254760" style="zoom:67%;"><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310153314915.png" alt="image-20240310153314915" style="zoom:67%;"><p>CAS 的全称是 <strong>Compare And Swap（比较与交换）</strong> ，用于实现乐观锁，被广泛应用于各大框架中。CAS 的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。</p><p><mark>CAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。</mark></p><blockquote><p><strong>原子操作</strong> 即最小不可拆分的操作，也就是说操作一旦开始，就不能被打断，直到操作完成。</p></blockquote><p>CAS 涉及到三个操作数：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>V</strong>：要更新的变量值(Var)</p></li><li class="lvl-2"><p><strong>E</strong>：预期值(Expected)</p></li><li class="lvl-2"><p><strong>N</strong>：拟写入的新值(New)</p></li></ul><p>当且仅当 V 的值等于 E 时，CAS 通过原子方式用新值 N 来更新 V 的值。如果不等，说明已经有其它线程更新了 V，则当前线程放弃更新。</p><h4 id="CAS存在的问题">CAS存在的问题</h4><ul class="lvl-0"><li class="lvl-2"><p>ABA问题，利用版本号机制可以解决</p></li><li class="lvl-2"><p>自旋问题，循环时间长开销大：当操作不成功的时候会一直自旋，直到操作成功，会占用过多CPU资源</p></li><li class="lvl-2"><p>只能保证一个共享变量的原子操作：只对单个共享变量有效，当涉及到多个共享变量CAS无效</p></li></ul><h2 id="多线程的执行安全">多线程的执行安全</h2><p><strong>要确保三大特性：原子性、可见性、有序性</strong></p><h3 id="原子性">原子性</h3><p>一个线程在CPU中操作不可暂停，也不可中断，要不执行完成，要不不执行</p><p>实现方案： 加锁</p><ol><li class="lvl-3"><p>synchronized：同步加锁</p></li><li class="lvl-3"><p>JUC里面的lock：加锁</p></li></ol><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310193152560.png" alt="image-20240310193152560" style="zoom:67%;"><h3 id="可见性">可见性</h3><p>让一个线程对共享变量的修改对另一个线程可见</p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310193255054.png" alt="image-20240310193255054" style="zoom:67%;"><h3 id="有序性">有序性</h3><p>指令重排：处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的</p><p>要避免指令重排：volatile</p><h2 id="线程池">线程池</h2><h3 id="线程池参数、原理-⭐">线程池参数、原理  ⭐</h3><p><strong>什么是线程池?</strong></p><p>顾名思义，线程池就是管理一系列线程的<strong>资源池</strong>。当有任务要处理时，直接从线程池中获取线程来处理，**处理完之后线程并不会立即被销毁，而是等待下一个任务。**池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。</p><p><strong>使用线程池的好处</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p></li><li class="lvl-2"><p><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</p></li><li class="lvl-2"><p><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</p></li></ul><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310193949527.png" alt="image-20240310193949527" style="zoom:67%;"><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310194453585.png" alt="image-20240310194453585"></p><p>1，任务在提交的时候，首先判断核心线程数是否已满，如果没有满则直接添加到工作线程执行</p><p>2，如果核心线程数满了，则判断阻塞队列是否已满，如果没有满，当前任务存入阻塞队列</p><p>3，如果阻塞队列也满了，则判断线程数是否小于最大线程数，如果满足条件，则使用临时线程执行任务</p><p>核心或临时线程执行完成任务后会检查阻塞队列中是否有需要执行的线程，如果有，则使用非核心线程执行任务</p><p>4，如果所有线程都在忙着（核心线程+临时线程），则走拒绝策略</p><h3 id="拒绝策略">拒绝策略</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>AbortPolicy</strong>：抛出<code>RejectedExecutionException</code>异常来拒绝新任务</p></li><li class="lvl-2"><p><strong>CallerRunsPolicy</strong>：调用执行自己的线程运行任务，也就是在调用execute()方法的线程中运行被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。<strong>该策略会降低对于新任务的提交速度</strong>，影响程序的整体性能。</p></li><li class="lvl-2"><p><strong>DiscardPolicy</strong>：不处理新任务，直接丢弃掉</p></li><li class="lvl-2"><p><strong>DiscardOldestPolicy</strong>：丢弃掉最早未处理的任务</p></li></ul><h3 id="线程池常用的阻塞队列">线程池常用的阻塞队列</h3><p>比较常见的有4个，用的最多是ArrayBlockingQueue和LinkedBlockingQueue</p><p><strong>1.ArrayBlockingQueue</strong>：基于数组结构的有界阻塞队列，FIFO。</p><p><strong>2.LinkedBlockingQueue</strong>：基于链表结构的有界阻塞队列，FIFO。</p><p><strong>3.DelayedWorkQueue</strong> ：延时队列，是一个<strong>优先级队列</strong>，可以实现<strong>定时任务</strong>，它可以保证每次出队的任务都是当前队列中执行时间最靠前的</p><p><strong>4.SynchronousQueue</strong>：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。</p><p><strong>ArrayBlockingQueue的LinkedBlockingQueue区别</strong></p><table><thead><tr><th><strong>LinkedBlockingQueue</strong></th><th><strong>ArrayBlockingQueue</strong></th></tr></thead><tbody><tr><td>默认无界，支持有界</td><td>强制有界</td></tr><tr><td>底层是链表</td><td>底层是数组</td></tr><tr><td>是懒惰的，创建节点的时候添加数据</td><td>提前初始化 Node  数组</td></tr><tr><td>入队会生成新 Node</td><td>Node需要是提前创建好的</td></tr><tr><td><strong>两把锁（头尾）</strong></td><td><strong>一把锁</strong></td></tr></tbody></table><p>左边是LinkedBlockingQueue加锁的方式，右边是ArrayBlockingQueue加锁的方式</p><ul class="lvl-0"><li class="lvl-2"><p>LinkedBlockingQueue<strong>读和写各有一把锁</strong>，性能相对较好</p></li><li class="lvl-2"><p>ArrayBlockingQueue只有一把锁，读和写公用，性能相对于LinkedBlockingQueue差一些</p></li></ul><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310200853628.png" alt="image-20240310200853628"></p><h3 id="如何确定核心线程数？">如何确定核心线程数？</h3><p>在设置核心线程数之前，需要先熟悉一些执行线程池执行任务的类型</p><ul class="lvl-0"><li class="lvl-2"><p>IO密集型任务</p></li></ul><p>一般来说：文件读写、DB读写、网络请求等</p><p>推荐：核心线程数大小设置为  <strong>2N+1</strong>    （N为计算机的CPU核数）</p><ul class="lvl-0"><li class="lvl-2"><p>CPU密集型任务</p></li></ul><p>一般来说：计算型代码、Bitmap转换、Gson转换等</p><p>推荐：核心线程数大小设置为  <strong>N+1</strong>    （N为计算机的CPU核数）</p><p>有一个简单并且适用面比较广的公式：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>CPU 密集型任务(N+1)：</strong> 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。</p></li><li class="lvl-2"><p><strong>I/O 密集型任务(2N)：</strong> 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。</p></li></ul><p><strong>如何判断是 CPU 密集任务还是 IO 密集任务？</strong></p><p>CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序。但凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上。</p><p><strong>参考回答：</strong></p><p>① 高并发、任务执行时间短 --&gt;（ CPU核数+1 ），减少线程上下文的切换</p><p>② 并发不高、任务执行时间长</p><ul class="lvl-0"><li class="lvl-2"><p>IO密集型的任务 --&gt; (CPU核数 * 2 + 1)</p></li><li class="lvl-2"><p>计算密集型任务 --&gt; （ CPU核数+1 ）</p></li></ul><p>③ 并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）</p><h3 id="线程池的种类">线程池的种类</h3><p>在java.util.concurrent.Executors类中提供了大量创建连接池的静态方法，常见就有四种</p><h4 id="newFixedThreadPool">newFixedThreadPool</h4><p>创建使用固定线程数的线程池</p><p>源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads, ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                      threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>核心线程数与最大线程数一样，没有救急线程</p></li><li class="lvl-2"><p>阻塞队列是LinkedBlockingQueue，最大容量为Integer.MAX_VALUE</p></li><li class="lvl-2"><p>适用场景：适用于<strong>任务量已知，相对耗时</strong>的任务</p></li></ul><p>即使 <code>maximumPoolSize</code> 的值比 <code>corePoolSize</code> 大，也至多只会创建 <code>corePoolSize</code> 个线程。这是因为<code>FixedThreadPool</code> 使用的是容量为 <code>Integer.MAX_VALUE</code> 的 <code>LinkedBlockingQueue</code>（无界队列），队列永远不会被放满。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FixedThreadPoolCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FixedThreadDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//创建一个固定大小的线程池，核心线程数和最大线程数都是3</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> <span class="title class_">FixedThreadDemo</span>());</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="newSingleThreadExecutor">newSingleThreadExecutor</h4><p><strong>单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO)执行</strong></p><p>源码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">           (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                   <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                   threadFactory));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>核心线程数和最大线程数都是1</p></li><li class="lvl-2"><p>阻塞队列是LinkedBlockingQueue，最大容量为Integer.MAX_VALUE</p></li><li class="lvl-2"><p>适用场景：<strong>适用于按照顺序执行的任务</strong></p></li></ul><p><code>SingleThreadExecutor</code> 和 <code>FixedThreadPool</code> 一样，使用的都是容量为 <code>Integer.MAX_VALUE</code> 的 <code>LinkedBlockingQueue</code>（无界队列）作为线程池的工作队列。<code>SingleThreadExecutor</code> 使用无界队列作为线程池的工作队列会对线程池带来的影响与 <code>FixedThreadPool</code> 相同。说简单点，就是可能会导致 <strong>OOM</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewSingleThreadCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//单个线程池，核心线程数和最大线程数都是1</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">Demo</span>());</span><br><span class="line">            Thread.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="newCachedThreadPool">newCachedThreadPool</h4><p>可缓存线程池</p><p>源码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">(ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>核心线程数为0</p></li><li class="lvl-2"><p>最大线程数是Integer.MAX_VALUE</p></li><li class="lvl-2"><p>阻塞队列为SynchronousQueue:不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。</p></li><li class="lvl-2"><p>适用场景：适合任务数比较密集，但每个任务执行时间较短的情况</p></li></ul><p><code>CachedThreadPool</code> 的<code>corePoolSize</code> 被设置为空（0），<code>maximumPoolSize</code>被设置为 <code>Integer.MAX.VALUE</code>，即它是无界的，这也就意味着如果主线程提交任务的速度高于 <code>maximumPool</code> 中线程处理任务的速度时，<code>CachedThreadPool</code> 会不断创建新的线程。极端情况下，这样会导致耗尽 cpu 和内存资源。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachedThreadPoolCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//修改睡眠时间，模拟线程执行需要花费的时间</span></span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(name + <span class="string">&quot;执行完了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//创建一个缓存的线程，没有核心线程数，最大线程数为Integer.MAX_VALUE</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">Demo</span>());</span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="newScheduledThreadPool">newScheduledThreadPool</h4><p>提供了“延迟”和“周期执行”功能的ThreadPoolExecutor。</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20230505222203615.png" alt="image-20230505222203615"></p><ul class="lvl-0"><li class="lvl-2"><p>适用场景：有定时和延迟执行的任务</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledThreadPoolCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">                System.out.println(name + <span class="string">&quot;, 开始：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(name + <span class="string">&quot;, 结束：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//按照周期执行的线程池，核心线程数为2，最大线程数为Integer.MAX_VALUE</span></span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledThreadPool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;程序开始：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * schedule 提交任务到线程池中</span></span><br><span class="line"><span class="comment">         * 第一个参数：提交的任务</span></span><br><span class="line"><span class="comment">         * 第二个参数：任务执行的延迟时间</span></span><br><span class="line"><span class="comment">         * 第三个参数：时间单位</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">Task</span>(), <span class="number">0</span>, TimeUnit.SECONDS);</span><br><span class="line">        scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">Task</span>(), <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">Task</span>(), <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        scheduledThreadPool.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么不建议用Executors创建线程池？">为什么不建议用Executors创建线程池？</h3><p>Executors创建的线程池，最大线程数等于核心线程数，并且请求队列无界，可能会造成OOM</p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20240310204839377.png" alt="image-20240310204839377" style="zoom:67%;"><h3 id="execute-vs-submit-⭐">execute()  vs  submit() ⭐</h3><ul class="lvl-0"><li class="lvl-2"><p><code>execute()</code>方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；</p></li><li class="lvl-2"><p><code>submit()</code>方法用于提交需要返回值的任务。<mark>线程池会返回一个 <code>Future</code> 类型的对象</mark>，通过这个 <code>Future</code> 对象可以判断任务是否执行成功，并且可以通过 <code>Future</code> 的 <code>get()</code>方法来获取返回值，<mark><code>get()</code>方法会阻塞当前线程直到任务完成</mark>，而使用 <code>get（long timeout，TimeUnit unit）</code>方法的话，如果在 <code>timeout</code> 时间内任务还没有执行完，就会抛出 <code>java.util.concurrent.TimeoutException</code>。</p></li></ul><p>这里只是为了演示使用，推荐使用 <code>ThreadPoolExecutor</code> 构造方法来创建线程池。</p><p>示例 1：使用 <code>get()</code>方法获取返回值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Future&lt;String&gt; submit = executorService.submit(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> submit.get();</span><br><span class="line">System.out.println(s);</span><br><span class="line">executorService.shutdown();</span><br></pre></td></tr></table></figure><h3 id="shutdown-VS-shutdownNow">shutdown() VS shutdownNow()</h3><ul class="lvl-0"><li class="lvl-2"><p><strong><code>shutdown（）</code></strong> :关闭线程池，线程池的状态变为 <code>SHUTDOWN</code>。<strong>线程池不再接受新任务了</strong>，但是<strong>队列里的任务得执行完毕。</strong></p></li><li class="lvl-2"><p><strong><code>shutdownNow（）</code></strong> :关闭线程池，线程池的状态变为 <code>STOP</code>。线程池会<strong>终止当前正在运行的任务</strong>，并停止处理排队的任务并<strong>返回正在等待执行的 List</strong>。</p></li></ul><p>调用完 <code>shutdownNow</code> 和 <code>shuwdown</code> 方法后，并不代表线程池已经完成关闭操作，它只是异步的通知线程池进行关闭处理。如果要同步等待线程池彻底关闭后才继续往下执行，需要调用<code>awaitTermination</code>方法进行同步等待。</p><p>在调用 <code>awaitTermination()</code> 方法时，应该设置合理的超时时间，以避免程序长时间阻塞而导致性能问题。另外。由于线程池中的任务可能会被取消或抛出异常，因此在使用 <code>awaitTermination()</code> 方法时还需要进行异常处理。<code>awaitTermination()</code> 方法会抛出 <code>InterruptedException</code> 异常，需要捕获并处理该异常，以避免程序崩溃或者无法正常退出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 关闭线程池</span></span><br><span class="line">executor.shutdown();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 等待线程池关闭，最多等待5分钟</span></span><br><span class="line">    <span class="keyword">if</span> (!executor.awaitTermination(<span class="number">5</span>, TimeUnit.MINUTES)) &#123;</span><br><span class="line">        <span class="comment">// 如果等待超时，则打印日志</span></span><br><span class="line">        System.err.println(<span class="string">&quot;线程池未能在5分钟内完全关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    <span class="comment">// 异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isTerminated-VS-isShutdown">isTerminated()  VS  isShutdown()</h3><ul class="lvl-0"><li class="lvl-2"><p><strong><code>isShutDown</code></strong> 当调用 <code>shutdown()</code> 方法后返回为 true。</p></li><li class="lvl-2"><p><strong><code>isTerminated</code></strong> 当调用 <code>shutdown()</code> 方法后，并且所有提交的任务完成后返回为 true</p></li></ul><h3 id="线程工厂">线程工厂</h3><p>默认情况下创建的线程名字类似 <code>pool-1-thread-n</code> 这样的，没有业务含义，不利于我们定位问题。</p><p>给线程池里的线程命名通常有下面两种方式：</p><p><strong>1、利用 guava 的 <code>ThreadFactoryBuilder</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadFactoryBuilder</span>()</span><br><span class="line">                        .setNameFormat(threadNamePrefix + <span class="string">&quot;-%d&quot;</span>)</span><br><span class="line">                        .setDaemon(<span class="literal">true</span>).build();</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(corePoolSize, maximumPoolSize, keepAliveTime, TimeUnit.MINUTES, workQueue, threadFactory)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2、自己实现 <code>ThreadFactory</code>。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程工厂，它设置线程名称，有利于我们定位问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NamingThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个带名字的线程池生产工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NamingThreadFactory</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t.setName(name + <span class="string">&quot; [#&quot;</span> + threadNum.incrementAndGet() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ThreadLocal">ThreadLocal</h2><h3 id="概述">概述</h3><p>ThreadLocal是多线程中对于<strong>解决线程安全</strong>的一个操作类，它会为每个线程都分配一个独立的线程副本从而解决了变量并发访问冲突的问题。ThreadLocal 同时实现了线程内的资源共享</p><p>案例：使用JDBC操作数据库时，会将每一个线程的Connection放入各自的ThreadLocal中，从而保证每个线程都在各自的 Connection 上进行数据库的操作，避免A线程关闭了B线程的连接。</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20230505224057228.png" alt="image-20230505224057228"></p><h3 id="ThreadLocal基本使用">ThreadLocal基本使用</h3><p>三个主要方法：</p><ul class="lvl-0"><li class="lvl-2"><p>set(value) 设置值</p></li><li class="lvl-2"><p>get() 获取值</p></li><li class="lvl-2"><p>remove() 清除值</p></li></ul><h3 id="ThreadLocal的实现原理-源码解析">ThreadLocal的实现原理&amp;源码解析</h3><p>从 <code>Thread</code>类源代码入手。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//与此线程有关的ThreadLocal值。由ThreadLocal类维护</span></span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">threadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护</span></span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">inheritableThreadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面<code>Thread</code>类 源代码可以看出<code>Thread</code> 类中有一个 <code>threadLocals</code> 和 一个 <code>inheritableThreadLocals</code> 变量，它们都是 <code>ThreadLocalMap</code> 类型的变量,我们可以把 <code>ThreadLocalMap</code> 理解为<code>ThreadLocal</code> 类实现的定制化的 <code>HashMap</code>。默认情况下这两个变量都是 null，只有当前线程调用 <code>ThreadLocal</code> 类的 <code>set</code>或<code>get</code>方法时才创建它们，实际上调用这两个方法的时候，我们调用的是<code>ThreadLocalMap</code>类对应的 <code>get()</code>、<code>set()</code>方法。</p><p>ThreadLocal本质来说就是一个线程内部存储类，从而让多个线程只操作自己内部的值，从而实现线程数据隔离</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20230505224341410.png" alt="image-20230505224341410"></p><p>在ThreadLocal中有一个内部类叫做ThreadLocalMap，类似于HashMap</p><p>ThreadLocalMap中有一个属性table数组，这个是真正存储数据的位置</p><p><strong>set方法</strong></p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20230505224626253.png" alt="image-20230505224626253"></p><p><strong>get方法/remove方法</strong></p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20230505224715087.png" alt="image-20230505224715087"></p><p>通过上面这些内容，我们足以通过得出结论：<strong>最终的变量是放在了当前线程的 <code>ThreadLocalMap</code> 中，并不是存在 <code>ThreadLocal</code> 上，<code>ThreadLocal</code> 可以理解为只是<code>ThreadLocalMap</code>的封装，传递了变量值。</strong><code>ThrealLocal</code> 类中可以通过<code>Thread.currentThread()</code>获取到当前线程对象后，直接通过<code>getMap(Thread t)</code>可以访问到该线程的<code>ThreadLocalMap</code>对象。</p><p><mark>实际上<code>key</code>并不是<code>ThreadLocal</code>本身，而是它的一个<strong>弱引用</strong></mark></p><h3 id="ThreadLocal-内存泄露问题">ThreadLocal-内存泄露问题</h3><p>Java对象中的四种引用类型：强引用、软引用、弱引用、虚引用</p><ul class="lvl-0"><li class="lvl-2"><p>强引用：最为普通的引用方式，表示一个对象处于有用且必须的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，<strong>宁可出现OOM，也不会对其进行回收</strong></p></li></ul><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20230505224755797.png" alt="image-20230505224755797"></p><ul class="lvl-0"><li class="lvl-2"><p>弱引用：表示一个对象处于可能有用且非必须的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收</p></li></ul><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20230505224812015.png" alt="image-20230505224812015"></p><p>每一个Thread维护一个ThreadLocalMap，在ThreadLocalMap中的Entry对象继承了WeakReference。其中key为使用弱引用的ThreadLocal实例，value为线程变量的副本</p><p><code>ThreadLocalMap</code> 中使用的 key 为 <code>ThreadLocal</code> 的弱引用，而 value 是强引用。所以，如果 <code>ThreadLocal</code> 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。</p><p>这样一来，<code>ThreadLocalMap</code> 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。<code>ThreadLocalMap</code> 实现中已经考虑了这种情况，在调用 <code>set()</code>、<code>get()</code>、<code>remove()</code> 方法的时候，会清理掉 key 为 null 的记录。使用完 <code>ThreadLocal</code>方法后最好手动调用<code>remove()</code>方法</p><p><img src="https://neo-typora.oss-cn-nanjing.aliyuncs.com/images/blog_images%2FJUC.assets%2Fimage-20230505224857538.png" alt="image-20230505224857538"></p><p>在使用ThreadLocal的时候，强烈建议：<strong>务必手动remove</strong></p><p><strong>实际上：</strong></p><p>ThreadLocal的源码中设计了自动清理key为null的entry的代码逻辑。主要逻辑如下：</p><p>调用 <code>set()</code> 方法后，有以下几种情况：</p><p><strong>情况1</strong>：通过 hash 计算后，Entry 数组对应的槽位为空，这种情况直接插入 key-value</p><p>**情况2：**发生了哈希冲突，且槽位数据不为空，但槽位中的 key 与要插入的 key 相同，这种情况直接覆盖元数据。</p><p><strong>情况3：<strong>发生了哈希冲突，槽位数据不为空，槽位中的key与当前要插入的key不同，则进行</strong>线性探测</strong>，向后进行查找：</p><p><strong>情况3.1</strong>：探测过程中，遇到空Entry，则直接插入</p><p>**情况3.2：**探测过程中，遇到key相同的Entry，则直接覆盖</p><p><strong>情况3.3：<strong>探测过程中，遇到 key = null 的槽位，槽位下标为 i，则调用 replaceStaleEntry() 方法，<code>slotToExpunge = staleSlot = i</code>，然后从当前位置向前进行探测，遇到key = null的槽位，则更新slotToExpunge的值，直到Entry为null，然后以 staleSlot 为起始位置</strong>向后进行探测</strong>：</p><p>**情况3.3.1：**如果找到key相同的entry则直接覆盖，然后交换 <code>table[i]</code> 和<code>table[staleSlot]</code> 的数据</p><p>**情况3.3.2：**如果找到空槽，则直接插入，然后与table[staleSlot]交换位置</p><p>插入后，开始进行过期元素的清理。</p><p><strong>清理过期元素的方法有</strong>：探测式清理、启发式清理</p><p>探测式清理从<code>slotToExpunge</code>开始向后清除过期元素，同时将没有过期的元素进行重新哈希，更新元素的位置，如果发生了哈冲突，则向后进行线性探测</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
